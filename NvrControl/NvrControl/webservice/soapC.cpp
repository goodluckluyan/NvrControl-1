/* soapC.cpp
   Generated by gSOAP 2.8.18 from webservice.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.18 2017-05-10 05:55:14 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_mons__SetIpcVedioQuality:
		return soap_in_mons__SetIpcVedioQuality(soap, NULL, NULL, "mons:SetIpcVedioQuality");
	case SOAP_TYPE_mons__SetIpcVedioQualityInfoRes:
		return soap_in_mons__SetIpcVedioQualityInfoRes(soap, NULL, NULL, "mons:SetIpcVedioQualityInfoRes");
	case SOAP_TYPE_mons__SetIpcVedioQualityInfo:
		return soap_in_mons__SetIpcVedioQualityInfo(soap, NULL, NULL, "mons:SetIpcVedioQualityInfo");
	case SOAP_TYPE_mons__GetIpcVedioQuality:
		return soap_in_mons__GetIpcVedioQuality(soap, NULL, NULL, "mons:GetIpcVedioQuality");
	case SOAP_TYPE_mons__GetIpcVedioQualityInfoRes:
		return soap_in_mons__GetIpcVedioQualityInfoRes(soap, NULL, NULL, "mons:GetIpcVedioQualityInfoRes");
	case SOAP_TYPE_mons__GetIpcVedioQualityInfo:
		return soap_in_mons__GetIpcVedioQualityInfo(soap, NULL, NULL, "mons:GetIpcVedioQualityInfo");
	case SOAP_TYPE_mons__GetIpcResoluRatio:
		return soap_in_mons__GetIpcResoluRatio(soap, NULL, NULL, "mons:GetIpcResoluRatio");
	case SOAP_TYPE_mons__GetIpcResoluRatioInfo:
		return soap_in_mons__GetIpcResoluRatioInfo(soap, NULL, NULL, "mons:GetIpcResoluRatioInfo");
	case SOAP_TYPE_mons__DRelease:
		return soap_in_mons__DRelease(soap, NULL, NULL, "mons:DRelease");
	case SOAP_TYPE_mons__ReleaseRes:
		return soap_in_mons__ReleaseRes(soap, NULL, NULL, "mons:ReleaseRes");
	case SOAP_TYPE_mons__DInit:
		return soap_in_mons__DInit(soap, NULL, NULL, "mons:DInit");
	case SOAP_TYPE_mons__InitRes:
		return soap_in_mons__InitRes(soap, NULL, NULL, "mons:InitRes");
	case SOAP_TYPE_mons__SetSystemTime:
		return soap_in_mons__SetSystemTime(soap, NULL, NULL, "mons:SetSystemTime");
	case SOAP_TYPE_mons__SetSystemInfoRes:
		return soap_in_mons__SetSystemInfoRes(soap, NULL, NULL, "mons:SetSystemInfoRes");
	case SOAP_TYPE_mons__SetSystemtimeInfo:
		return soap_in_mons__SetSystemtimeInfo(soap, NULL, NULL, "mons:SetSystemtimeInfo");
	case SOAP_TYPE_mons__GetSystemTimeInfo:
		return soap_in_mons__GetSystemTimeInfo(soap, NULL, NULL, "mons:GetSystemTimeInfo");
	case SOAP_TYPE_mons__GetSystemTimeRes:
		return soap_in_mons__GetSystemTimeRes(soap, NULL, NULL, "mons:GetSystemTimeRes");
	case SOAP_TYPE_mons__SetIpcInfo:
		return soap_in_mons__SetIpcInfo(soap, NULL, NULL, "mons:SetIpcInfo");
	case SOAP_TYPE_mons__SetIpcInfoRes:
		return soap_in_mons__SetIpcInfoRes(soap, NULL, NULL, "mons:SetIpcInfoRes");
	case SOAP_TYPE_mons__IPCINFO:
		return soap_in_mons__IPCINFO(soap, NULL, NULL, "mons:IPCINFO");
	case SOAP_TYPE_mons__DownLoadByTime:
		return soap_in_mons__DownLoadByTime(soap, NULL, NULL, "mons:DownLoadByTime");
	case SOAP_TYPE_mons__DownloadTimeResponse:
		return soap_in_mons__DownloadTimeResponse(soap, NULL, NULL, "mons:DownloadTimeResponse");
	case SOAP_TYPE_mons__DownloadTime:
		return soap_in_mons__DownloadTime(soap, NULL, NULL, "mons:DownloadTime");
	case SOAP_TYPE_mons__SetDlSpeed:
		return soap_in_mons__SetDlSpeed(soap, NULL, NULL, "mons:SetDlSpeed");
	case SOAP_TYPE_mons__SetDLSpeedResponse:
		return soap_in_mons__SetDLSpeedResponse(soap, NULL, NULL, "mons:SetDLSpeedResponse");
	case SOAP_TYPE_mons__GetoneInfos:
		return soap_in_mons__GetoneInfos(soap, NULL, NULL, "mons:GetoneInfos");
	case SOAP_TYPE_mons__get1:
		return soap_in_mons__get1(soap, NULL, NULL, "mons:get1");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SetIpcVedioQuality"))
		{	*type = SOAP_TYPE_mons__SetIpcVedioQuality;
			return soap_in_mons__SetIpcVedioQuality(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SetIpcVedioQualityInfoRes"))
		{	*type = SOAP_TYPE_mons__SetIpcVedioQualityInfoRes;
			return soap_in_mons__SetIpcVedioQualityInfoRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SetIpcVedioQualityInfo"))
		{	*type = SOAP_TYPE_mons__SetIpcVedioQualityInfo;
			return soap_in_mons__SetIpcVedioQualityInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetIpcVedioQuality"))
		{	*type = SOAP_TYPE_mons__GetIpcVedioQuality;
			return soap_in_mons__GetIpcVedioQuality(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetIpcVedioQualityInfoRes"))
		{	*type = SOAP_TYPE_mons__GetIpcVedioQualityInfoRes;
			return soap_in_mons__GetIpcVedioQualityInfoRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetIpcVedioQualityInfo"))
		{	*type = SOAP_TYPE_mons__GetIpcVedioQualityInfo;
			return soap_in_mons__GetIpcVedioQualityInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetIpcResoluRatio"))
		{	*type = SOAP_TYPE_mons__GetIpcResoluRatio;
			return soap_in_mons__GetIpcResoluRatio(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetIpcResoluRatioInfo"))
		{	*type = SOAP_TYPE_mons__GetIpcResoluRatioInfo;
			return soap_in_mons__GetIpcResoluRatioInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:DRelease"))
		{	*type = SOAP_TYPE_mons__DRelease;
			return soap_in_mons__DRelease(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:ReleaseRes"))
		{	*type = SOAP_TYPE_mons__ReleaseRes;
			return soap_in_mons__ReleaseRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:DInit"))
		{	*type = SOAP_TYPE_mons__DInit;
			return soap_in_mons__DInit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:InitRes"))
		{	*type = SOAP_TYPE_mons__InitRes;
			return soap_in_mons__InitRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SetSystemTime"))
		{	*type = SOAP_TYPE_mons__SetSystemTime;
			return soap_in_mons__SetSystemTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SetSystemInfoRes"))
		{	*type = SOAP_TYPE_mons__SetSystemInfoRes;
			return soap_in_mons__SetSystemInfoRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SetSystemtimeInfo"))
		{	*type = SOAP_TYPE_mons__SetSystemtimeInfo;
			return soap_in_mons__SetSystemtimeInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetSystemTimeInfo"))
		{	*type = SOAP_TYPE_mons__GetSystemTimeInfo;
			return soap_in_mons__GetSystemTimeInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetSystemTimeRes"))
		{	*type = SOAP_TYPE_mons__GetSystemTimeRes;
			return soap_in_mons__GetSystemTimeRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SetIpcInfo"))
		{	*type = SOAP_TYPE_mons__SetIpcInfo;
			return soap_in_mons__SetIpcInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SetIpcInfoRes"))
		{	*type = SOAP_TYPE_mons__SetIpcInfoRes;
			return soap_in_mons__SetIpcInfoRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:IPCINFO"))
		{	*type = SOAP_TYPE_mons__IPCINFO;
			return soap_in_mons__IPCINFO(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:DownLoadByTime"))
		{	*type = SOAP_TYPE_mons__DownLoadByTime;
			return soap_in_mons__DownLoadByTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:DownloadTimeResponse"))
		{	*type = SOAP_TYPE_mons__DownloadTimeResponse;
			return soap_in_mons__DownloadTimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:DownloadTime"))
		{	*type = SOAP_TYPE_mons__DownloadTime;
			return soap_in_mons__DownloadTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SetDlSpeed"))
		{	*type = SOAP_TYPE_mons__SetDlSpeed;
			return soap_in_mons__SetDlSpeed(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SetDLSpeedResponse"))
		{	*type = SOAP_TYPE_mons__SetDLSpeedResponse;
			return soap_in_mons__SetDLSpeedResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetoneInfos"))
		{	*type = SOAP_TYPE_mons__GetoneInfos;
			return soap_in_mons__GetoneInfos(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:get1"))
		{	*type = SOAP_TYPE_mons__get1;
			return soap_in_mons__get1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_mons__SetIpcVedioQuality:
		return soap_out_mons__SetIpcVedioQuality(soap, tag, id, (const struct mons__SetIpcVedioQuality *)ptr, "mons:SetIpcVedioQuality");
	case SOAP_TYPE_mons__SetIpcVedioQualityInfoRes:
		return soap_out_mons__SetIpcVedioQualityInfoRes(soap, tag, id, (const struct mons__SetIpcVedioQualityInfoRes *)ptr, "mons:SetIpcVedioQualityInfoRes");
	case SOAP_TYPE_mons__SetIpcVedioQualityInfo:
		return soap_out_mons__SetIpcVedioQualityInfo(soap, tag, id, (const struct mons__SetIpcVedioQualityInfo *)ptr, "mons:SetIpcVedioQualityInfo");
	case SOAP_TYPE_mons__GetIpcVedioQuality:
		return soap_out_mons__GetIpcVedioQuality(soap, tag, id, (const struct mons__GetIpcVedioQuality *)ptr, "mons:GetIpcVedioQuality");
	case SOAP_TYPE_mons__GetIpcVedioQualityInfoRes:
		return soap_out_mons__GetIpcVedioQualityInfoRes(soap, tag, id, (const struct mons__GetIpcVedioQualityInfoRes *)ptr, "mons:GetIpcVedioQualityInfoRes");
	case SOAP_TYPE_mons__GetIpcVedioQualityInfo:
		return soap_out_mons__GetIpcVedioQualityInfo(soap, tag, id, (const struct mons__GetIpcVedioQualityInfo *)ptr, "mons:GetIpcVedioQualityInfo");
	case SOAP_TYPE_mons__GetIpcResoluRatio:
		return soap_out_mons__GetIpcResoluRatio(soap, tag, id, (const struct mons__GetIpcResoluRatio *)ptr, "mons:GetIpcResoluRatio");
	case SOAP_TYPE_mons__GetIpcResoluRatioInfo:
		return soap_out_mons__GetIpcResoluRatioInfo(soap, tag, id, (const struct mons__GetIpcResoluRatioInfo *)ptr, "mons:GetIpcResoluRatioInfo");
	case SOAP_TYPE_mons__DRelease:
		return soap_out_mons__DRelease(soap, tag, id, (const struct mons__DRelease *)ptr, "mons:DRelease");
	case SOAP_TYPE_mons__ReleaseRes:
		return soap_out_mons__ReleaseRes(soap, tag, id, (const struct mons__ReleaseRes *)ptr, "mons:ReleaseRes");
	case SOAP_TYPE_mons__DInit:
		return soap_out_mons__DInit(soap, tag, id, (const struct mons__DInit *)ptr, "mons:DInit");
	case SOAP_TYPE_mons__InitRes:
		return soap_out_mons__InitRes(soap, tag, id, (const struct mons__InitRes *)ptr, "mons:InitRes");
	case SOAP_TYPE_mons__SetSystemTime:
		return soap_out_mons__SetSystemTime(soap, tag, id, (const struct mons__SetSystemTime *)ptr, "mons:SetSystemTime");
	case SOAP_TYPE_mons__SetSystemInfoRes:
		return soap_out_mons__SetSystemInfoRes(soap, tag, id, (const struct mons__SetSystemInfoRes *)ptr, "mons:SetSystemInfoRes");
	case SOAP_TYPE_mons__SetSystemtimeInfo:
		return soap_out_mons__SetSystemtimeInfo(soap, tag, id, (const struct mons__SetSystemtimeInfo *)ptr, "mons:SetSystemtimeInfo");
	case SOAP_TYPE_mons__GetSystemTimeInfo:
		return soap_out_mons__GetSystemTimeInfo(soap, tag, id, (const struct mons__GetSystemTimeInfo *)ptr, "mons:GetSystemTimeInfo");
	case SOAP_TYPE_mons__GetSystemTimeRes:
		return soap_out_mons__GetSystemTimeRes(soap, tag, id, (const struct mons__GetSystemTimeRes *)ptr, "mons:GetSystemTimeRes");
	case SOAP_TYPE_mons__SetIpcInfo:
		return soap_out_mons__SetIpcInfo(soap, tag, id, (const struct mons__SetIpcInfo *)ptr, "mons:SetIpcInfo");
	case SOAP_TYPE_mons__SetIpcInfoRes:
		return soap_out_mons__SetIpcInfoRes(soap, tag, id, (const struct mons__SetIpcInfoRes *)ptr, "mons:SetIpcInfoRes");
	case SOAP_TYPE_mons__IPCINFO:
		return soap_out_mons__IPCINFO(soap, tag, id, (const struct mons__IPCINFO *)ptr, "mons:IPCINFO");
	case SOAP_TYPE_mons__DownLoadByTime:
		return soap_out_mons__DownLoadByTime(soap, tag, id, (const struct mons__DownLoadByTime *)ptr, "mons:DownLoadByTime");
	case SOAP_TYPE_mons__DownloadTimeResponse:
		return soap_out_mons__DownloadTimeResponse(soap, tag, id, (const struct mons__DownloadTimeResponse *)ptr, "mons:DownloadTimeResponse");
	case SOAP_TYPE_mons__DownloadTime:
		return soap_out_mons__DownloadTime(soap, tag, id, (const struct mons__DownloadTime *)ptr, "mons:DownloadTime");
	case SOAP_TYPE_mons__SetDlSpeed:
		return soap_out_mons__SetDlSpeed(soap, tag, id, (const struct mons__SetDlSpeed *)ptr, "mons:SetDlSpeed");
	case SOAP_TYPE_mons__SetDLSpeedResponse:
		return soap_out_mons__SetDLSpeedResponse(soap, tag, id, (const struct mons__SetDLSpeedResponse *)ptr, "mons:SetDLSpeedResponse");
	case SOAP_TYPE_mons__GetoneInfos:
		return soap_out_mons__GetoneInfos(soap, tag, id, (const struct mons__GetoneInfos *)ptr, "mons:GetoneInfos");
	case SOAP_TYPE_mons__get1:
		return soap_out_mons__get1(soap, tag, id, (const struct mons__get1 *)ptr, "mons:get1");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_mons__SetIpcVedioQuality:
		soap_serialize_mons__SetIpcVedioQuality(soap, (const struct mons__SetIpcVedioQuality *)ptr);
		break;
	case SOAP_TYPE_mons__SetIpcVedioQualityInfoRes:
		soap_serialize_mons__SetIpcVedioQualityInfoRes(soap, (const struct mons__SetIpcVedioQualityInfoRes *)ptr);
		break;
	case SOAP_TYPE_mons__SetIpcVedioQualityInfo:
		soap_serialize_mons__SetIpcVedioQualityInfo(soap, (const struct mons__SetIpcVedioQualityInfo *)ptr);
		break;
	case SOAP_TYPE_mons__GetIpcVedioQuality:
		soap_serialize_mons__GetIpcVedioQuality(soap, (const struct mons__GetIpcVedioQuality *)ptr);
		break;
	case SOAP_TYPE_mons__GetIpcVedioQualityInfoRes:
		soap_serialize_mons__GetIpcVedioQualityInfoRes(soap, (const struct mons__GetIpcVedioQualityInfoRes *)ptr);
		break;
	case SOAP_TYPE_mons__GetIpcVedioQualityInfo:
		soap_serialize_mons__GetIpcVedioQualityInfo(soap, (const struct mons__GetIpcVedioQualityInfo *)ptr);
		break;
	case SOAP_TYPE_mons__GetIpcResoluRatio:
		soap_serialize_mons__GetIpcResoluRatio(soap, (const struct mons__GetIpcResoluRatio *)ptr);
		break;
	case SOAP_TYPE_mons__GetIpcResoluRatioInfo:
		soap_serialize_mons__GetIpcResoluRatioInfo(soap, (const struct mons__GetIpcResoluRatioInfo *)ptr);
		break;
	case SOAP_TYPE_mons__DRelease:
		soap_serialize_mons__DRelease(soap, (const struct mons__DRelease *)ptr);
		break;
	case SOAP_TYPE_mons__ReleaseRes:
		soap_serialize_mons__ReleaseRes(soap, (const struct mons__ReleaseRes *)ptr);
		break;
	case SOAP_TYPE_mons__DInit:
		soap_serialize_mons__DInit(soap, (const struct mons__DInit *)ptr);
		break;
	case SOAP_TYPE_mons__InitRes:
		soap_serialize_mons__InitRes(soap, (const struct mons__InitRes *)ptr);
		break;
	case SOAP_TYPE_mons__SetSystemTime:
		soap_serialize_mons__SetSystemTime(soap, (const struct mons__SetSystemTime *)ptr);
		break;
	case SOAP_TYPE_mons__SetSystemInfoRes:
		soap_serialize_mons__SetSystemInfoRes(soap, (const struct mons__SetSystemInfoRes *)ptr);
		break;
	case SOAP_TYPE_mons__SetSystemtimeInfo:
		soap_serialize_mons__SetSystemtimeInfo(soap, (const struct mons__SetSystemtimeInfo *)ptr);
		break;
	case SOAP_TYPE_mons__GetSystemTimeInfo:
		soap_serialize_mons__GetSystemTimeInfo(soap, (const struct mons__GetSystemTimeInfo *)ptr);
		break;
	case SOAP_TYPE_mons__GetSystemTimeRes:
		soap_serialize_mons__GetSystemTimeRes(soap, (const struct mons__GetSystemTimeRes *)ptr);
		break;
	case SOAP_TYPE_mons__SetIpcInfo:
		soap_serialize_mons__SetIpcInfo(soap, (const struct mons__SetIpcInfo *)ptr);
		break;
	case SOAP_TYPE_mons__SetIpcInfoRes:
		soap_serialize_mons__SetIpcInfoRes(soap, (const struct mons__SetIpcInfoRes *)ptr);
		break;
	case SOAP_TYPE_mons__IPCINFO:
		soap_serialize_mons__IPCINFO(soap, (const struct mons__IPCINFO *)ptr);
		break;
	case SOAP_TYPE_mons__DownLoadByTime:
		soap_serialize_mons__DownLoadByTime(soap, (const struct mons__DownLoadByTime *)ptr);
		break;
	case SOAP_TYPE_mons__DownloadTimeResponse:
		soap_serialize_mons__DownloadTimeResponse(soap, (const struct mons__DownloadTimeResponse *)ptr);
		break;
	case SOAP_TYPE_mons__DownloadTime:
		soap_serialize_mons__DownloadTime(soap, (const struct mons__DownloadTime *)ptr);
		break;
	case SOAP_TYPE_mons__SetDlSpeed:
		soap_serialize_mons__SetDlSpeed(soap, (const struct mons__SetDlSpeed *)ptr);
		break;
	case SOAP_TYPE_mons__SetDLSpeedResponse:
		soap_serialize_mons__SetDLSpeedResponse(soap, (const struct mons__SetDLSpeedResponse *)ptr);
		break;
	case SOAP_TYPE_mons__GetoneInfos:
		soap_serialize_mons__GetoneInfos(soap, (const struct mons__GetoneInfos *)ptr);
		break;
	case SOAP_TYPE_mons__get1:
		soap_serialize_mons__get1(soap, (const struct mons__get1 *)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_mons__get1:
		return (void*)soap_instantiate_mons__get1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetoneInfos:
		return (void*)soap_instantiate_mons__GetoneInfos(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SetDLSpeedResponse:
		return (void*)soap_instantiate_mons__SetDLSpeedResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SetDlSpeed:
		return (void*)soap_instantiate_mons__SetDlSpeed(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__DownloadTime:
		return (void*)soap_instantiate_mons__DownloadTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__DownloadTimeResponse:
		return (void*)soap_instantiate_mons__DownloadTimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__DownLoadByTime:
		return (void*)soap_instantiate_mons__DownLoadByTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__IPCINFO:
		return (void*)soap_instantiate_mons__IPCINFO(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SetIpcInfoRes:
		return (void*)soap_instantiate_mons__SetIpcInfoRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SetIpcInfo:
		return (void*)soap_instantiate_mons__SetIpcInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetSystemTimeRes:
		return (void*)soap_instantiate_mons__GetSystemTimeRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetSystemTimeInfo:
		return (void*)soap_instantiate_mons__GetSystemTimeInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SetSystemtimeInfo:
		return (void*)soap_instantiate_mons__SetSystemtimeInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SetSystemInfoRes:
		return (void*)soap_instantiate_mons__SetSystemInfoRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SetSystemTime:
		return (void*)soap_instantiate_mons__SetSystemTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__InitRes:
		return (void*)soap_instantiate_mons__InitRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__DInit:
		return (void*)soap_instantiate_mons__DInit(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__ReleaseRes:
		return (void*)soap_instantiate_mons__ReleaseRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__DRelease:
		return (void*)soap_instantiate_mons__DRelease(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetIpcResoluRatioInfo:
		return (void*)soap_instantiate_mons__GetIpcResoluRatioInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetIpcResoluRatio:
		return (void*)soap_instantiate_mons__GetIpcResoluRatio(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetIpcVedioQualityInfo:
		return (void*)soap_instantiate_mons__GetIpcVedioQualityInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetIpcVedioQualityInfoRes:
		return (void*)soap_instantiate_mons__GetIpcVedioQualityInfoRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetIpcVedioQuality:
		return (void*)soap_instantiate_mons__GetIpcVedioQuality(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SetIpcVedioQualityInfo:
		return (void*)soap_instantiate_mons__SetIpcVedioQualityInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SetIpcVedioQualityInfoRes:
		return (void*)soap_instantiate_mons__SetIpcVedioQualityInfoRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SetIpcVedioQuality:
		return (void*)soap_instantiate_mons__SetIpcVedioQuality(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_mons__get1:
		if (p->size < 0)
			SOAP_DELETE((struct mons__get1*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__get1*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetoneInfos:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetoneInfos*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetoneInfos*)p->ptr);
		break;
	case SOAP_TYPE_mons__SetDLSpeedResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SetDLSpeedResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SetDLSpeedResponse*)p->ptr);
		break;
	case SOAP_TYPE_mons__SetDlSpeed:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SetDlSpeed*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SetDlSpeed*)p->ptr);
		break;
	case SOAP_TYPE_mons__DownloadTime:
		if (p->size < 0)
			SOAP_DELETE((struct mons__DownloadTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__DownloadTime*)p->ptr);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_mons__DownloadTimeResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mons__DownloadTimeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__DownloadTimeResponse*)p->ptr);
		break;
	case SOAP_TYPE_mons__DownLoadByTime:
		if (p->size < 0)
			SOAP_DELETE((struct mons__DownLoadByTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__DownLoadByTime*)p->ptr);
		break;
	case SOAP_TYPE_mons__IPCINFO:
		if (p->size < 0)
			SOAP_DELETE((struct mons__IPCINFO*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__IPCINFO*)p->ptr);
		break;
	case SOAP_TYPE_mons__SetIpcInfoRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SetIpcInfoRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SetIpcInfoRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__SetIpcInfo:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SetIpcInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SetIpcInfo*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetSystemTimeRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetSystemTimeRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetSystemTimeRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetSystemTimeInfo:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetSystemTimeInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetSystemTimeInfo*)p->ptr);
		break;
	case SOAP_TYPE_mons__SetSystemtimeInfo:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SetSystemtimeInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SetSystemtimeInfo*)p->ptr);
		break;
	case SOAP_TYPE_mons__SetSystemInfoRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SetSystemInfoRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SetSystemInfoRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__SetSystemTime:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SetSystemTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SetSystemTime*)p->ptr);
		break;
	case SOAP_TYPE_mons__InitRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__InitRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__InitRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__DInit:
		if (p->size < 0)
			SOAP_DELETE((struct mons__DInit*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__DInit*)p->ptr);
		break;
	case SOAP_TYPE_mons__ReleaseRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__ReleaseRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__ReleaseRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__DRelease:
		if (p->size < 0)
			SOAP_DELETE((struct mons__DRelease*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__DRelease*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetIpcResoluRatioInfo:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetIpcResoluRatioInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetIpcResoluRatioInfo*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetIpcResoluRatio:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetIpcResoluRatio*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetIpcResoluRatio*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetIpcVedioQualityInfo:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetIpcVedioQualityInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetIpcVedioQualityInfo*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetIpcVedioQualityInfoRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetIpcVedioQualityInfoRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetIpcVedioQualityInfoRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetIpcVedioQuality:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetIpcVedioQuality*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetIpcVedioQuality*)p->ptr);
		break;
	case SOAP_TYPE_mons__SetIpcVedioQualityInfo:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SetIpcVedioQualityInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SetIpcVedioQualityInfo*)p->ptr);
		break;
	case SOAP_TYPE_mons__SetIpcVedioQualityInfoRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SetIpcVedioQualityInfoRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SetIpcVedioQualityInfoRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__SetIpcVedioQuality:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SetIpcVedioQuality*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SetIpcVedioQuality*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE((std::vector<std::string >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<std::string >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetIpcVedioQuality(struct soap *soap, struct mons__SetIpcVedioQuality *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nAudiNU);
	soap_default_int(soap, &a->nDevicePo);
	soap_default_mons__SetIpcVedioQualityInfo(soap, &a->vedioInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetIpcVedioQuality(struct soap *soap, const struct mons__SetIpcVedioQuality *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mons__SetIpcVedioQualityInfo(soap, &a->vedioInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetIpcVedioQuality(struct soap *soap, const char *tag, int id, const struct mons__SetIpcVedioQuality *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SetIpcVedioQuality), type))
		return soap->error;
	if (soap_out_int(soap, "nAudiNU", -1, &a->nAudiNU, ""))
		return soap->error;
	if (soap_out_int(soap, "nDevicePo", -1, &a->nDevicePo, ""))
		return soap->error;
	if (soap_out_mons__SetIpcVedioQualityInfo(soap, "vedioInfo", -1, &a->vedioInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SetIpcVedioQuality * SOAP_FMAC4 soap_in_mons__SetIpcVedioQuality(struct soap *soap, const char *tag, struct mons__SetIpcVedioQuality *a, const char *type)
{
	size_t soap_flag_nAudiNU = 1;
	size_t soap_flag_nDevicePo = 1;
	size_t soap_flag_vedioInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SetIpcVedioQuality *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SetIpcVedioQuality, sizeof(struct mons__SetIpcVedioQuality), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_mons__SetIpcVedioQuality(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nAudiNU && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nAudiNU", &a->nAudiNU, "xsd:int"))
				{	soap_flag_nAudiNU--;
					continue;
				}
			if (soap_flag_nDevicePo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nDevicePo", &a->nDevicePo, "xsd:int"))
				{	soap_flag_nDevicePo--;
					continue;
				}
			if (soap_flag_vedioInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mons__SetIpcVedioQualityInfo(soap, "vedioInfo", &a->vedioInfo, "mons:SetIpcVedioQualityInfo"))
				{	soap_flag_vedioInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SetIpcVedioQuality *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SetIpcVedioQuality, 0, sizeof(struct mons__SetIpcVedioQuality), 0, soap_copy_mons__SetIpcVedioQuality);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nAudiNU > 0 || soap_flag_nDevicePo > 0 || soap_flag_vedioInfo > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetIpcVedioQuality(struct soap *soap, const struct mons__SetIpcVedioQuality *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SetIpcVedioQuality);
	if (soap_out_mons__SetIpcVedioQuality(soap, tag?tag:"mons:SetIpcVedioQuality", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SetIpcVedioQuality * SOAP_FMAC4 soap_get_mons__SetIpcVedioQuality(struct soap *soap, struct mons__SetIpcVedioQuality *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SetIpcVedioQuality(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SetIpcVedioQuality * SOAP_FMAC2 soap_instantiate_mons__SetIpcVedioQuality(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SetIpcVedioQuality(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SetIpcVedioQuality, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SetIpcVedioQuality);
		if (size)
			*size = sizeof(struct mons__SetIpcVedioQuality);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SetIpcVedioQuality, n);
		if (size)
			*size = n * sizeof(struct mons__SetIpcVedioQuality);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SetIpcVedioQuality*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetIpcVedioQuality(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SetIpcVedioQuality %p -> %p\n", q, p));
	*(struct mons__SetIpcVedioQuality*)p = *(struct mons__SetIpcVedioQuality*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetIpcVedioQualityInfoRes(struct soap *soap, struct mons__SetIpcVedioQualityInfoRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->isOK);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetIpcVedioQualityInfoRes(struct soap *soap, const struct mons__SetIpcVedioQualityInfoRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetIpcVedioQualityInfoRes(struct soap *soap, const char *tag, int id, const struct mons__SetIpcVedioQualityInfoRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SetIpcVedioQualityInfoRes), type))
		return soap->error;
	if (soap_out_bool(soap, "isOK", -1, &a->isOK, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SetIpcVedioQualityInfoRes * SOAP_FMAC4 soap_in_mons__SetIpcVedioQualityInfoRes(struct soap *soap, const char *tag, struct mons__SetIpcVedioQualityInfoRes *a, const char *type)
{
	size_t soap_flag_isOK = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SetIpcVedioQualityInfoRes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SetIpcVedioQualityInfoRes, sizeof(struct mons__SetIpcVedioQualityInfoRes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__SetIpcVedioQualityInfoRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_isOK && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isOK", &a->isOK, "xsd:boolean"))
				{	soap_flag_isOK--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SetIpcVedioQualityInfoRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SetIpcVedioQualityInfoRes, 0, sizeof(struct mons__SetIpcVedioQualityInfoRes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isOK > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetIpcVedioQualityInfoRes(struct soap *soap, const struct mons__SetIpcVedioQualityInfoRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SetIpcVedioQualityInfoRes);
	if (soap_out_mons__SetIpcVedioQualityInfoRes(soap, tag?tag:"mons:SetIpcVedioQualityInfoRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SetIpcVedioQualityInfoRes * SOAP_FMAC4 soap_get_mons__SetIpcVedioQualityInfoRes(struct soap *soap, struct mons__SetIpcVedioQualityInfoRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SetIpcVedioQualityInfoRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SetIpcVedioQualityInfoRes * SOAP_FMAC2 soap_instantiate_mons__SetIpcVedioQualityInfoRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SetIpcVedioQualityInfoRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SetIpcVedioQualityInfoRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SetIpcVedioQualityInfoRes);
		if (size)
			*size = sizeof(struct mons__SetIpcVedioQualityInfoRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SetIpcVedioQualityInfoRes, n);
		if (size)
			*size = n * sizeof(struct mons__SetIpcVedioQualityInfoRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SetIpcVedioQualityInfoRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetIpcVedioQualityInfoRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SetIpcVedioQualityInfoRes %p -> %p\n", q, p));
	*(struct mons__SetIpcVedioQualityInfoRes*)p = *(struct mons__SetIpcVedioQualityInfoRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetIpcVedioQualityInfo(struct soap *soap, struct mons__SetIpcVedioQualityInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->ResoluRatio);
	soap_default_int(soap, &a->frame);
	soap_default_std__string(soap, &a->CodeMode);
	soap_default_int(soap, &a->stream);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetIpcVedioQualityInfo(struct soap *soap, const struct mons__SetIpcVedioQualityInfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->ResoluRatio);
	soap_serialize_std__string(soap, &a->CodeMode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetIpcVedioQualityInfo(struct soap *soap, const char *tag, int id, const struct mons__SetIpcVedioQualityInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SetIpcVedioQualityInfo), type))
		return soap->error;
	if (soap_out_std__string(soap, "ResoluRatio", -1, &a->ResoluRatio, ""))
		return soap->error;
	if (soap_out_int(soap, "frame", -1, &a->frame, ""))
		return soap->error;
	if (soap_out_std__string(soap, "CodeMode", -1, &a->CodeMode, ""))
		return soap->error;
	if (soap_out_int(soap, "stream", -1, &a->stream, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SetIpcVedioQualityInfo * SOAP_FMAC4 soap_in_mons__SetIpcVedioQualityInfo(struct soap *soap, const char *tag, struct mons__SetIpcVedioQualityInfo *a, const char *type)
{
	size_t soap_flag_ResoluRatio = 1;
	size_t soap_flag_frame = 1;
	size_t soap_flag_CodeMode = 1;
	size_t soap_flag_stream = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SetIpcVedioQualityInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SetIpcVedioQualityInfo, sizeof(struct mons__SetIpcVedioQualityInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_mons__SetIpcVedioQualityInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ResoluRatio && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ResoluRatio", &a->ResoluRatio, "xsd:string"))
				{	soap_flag_ResoluRatio--;
					continue;
				}
			if (soap_flag_frame && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "frame", &a->frame, "xsd:int"))
				{	soap_flag_frame--;
					continue;
				}
			if (soap_flag_CodeMode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "CodeMode", &a->CodeMode, "xsd:string"))
				{	soap_flag_CodeMode--;
					continue;
				}
			if (soap_flag_stream && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "stream", &a->stream, "xsd:int"))
				{	soap_flag_stream--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SetIpcVedioQualityInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SetIpcVedioQualityInfo, 0, sizeof(struct mons__SetIpcVedioQualityInfo), 0, soap_copy_mons__SetIpcVedioQualityInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ResoluRatio > 0 || soap_flag_frame > 0 || soap_flag_CodeMode > 0 || soap_flag_stream > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetIpcVedioQualityInfo(struct soap *soap, const struct mons__SetIpcVedioQualityInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SetIpcVedioQualityInfo);
	if (soap_out_mons__SetIpcVedioQualityInfo(soap, tag?tag:"mons:SetIpcVedioQualityInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SetIpcVedioQualityInfo * SOAP_FMAC4 soap_get_mons__SetIpcVedioQualityInfo(struct soap *soap, struct mons__SetIpcVedioQualityInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SetIpcVedioQualityInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SetIpcVedioQualityInfo * SOAP_FMAC2 soap_instantiate_mons__SetIpcVedioQualityInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SetIpcVedioQualityInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SetIpcVedioQualityInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SetIpcVedioQualityInfo);
		if (size)
			*size = sizeof(struct mons__SetIpcVedioQualityInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SetIpcVedioQualityInfo, n);
		if (size)
			*size = n * sizeof(struct mons__SetIpcVedioQualityInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SetIpcVedioQualityInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetIpcVedioQualityInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SetIpcVedioQualityInfo %p -> %p\n", q, p));
	*(struct mons__SetIpcVedioQualityInfo*)p = *(struct mons__SetIpcVedioQualityInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIpcVedioQuality(struct soap *soap, struct mons__GetIpcVedioQuality *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nAudiNU);
	soap_default_int(soap, &a->nDevicePo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIpcVedioQuality(struct soap *soap, const struct mons__GetIpcVedioQuality *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIpcVedioQuality(struct soap *soap, const char *tag, int id, const struct mons__GetIpcVedioQuality *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetIpcVedioQuality), type))
		return soap->error;
	if (soap_out_int(soap, "nAudiNU", -1, &a->nAudiNU, ""))
		return soap->error;
	if (soap_out_int(soap, "nDevicePo", -1, &a->nDevicePo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetIpcVedioQuality * SOAP_FMAC4 soap_in_mons__GetIpcVedioQuality(struct soap *soap, const char *tag, struct mons__GetIpcVedioQuality *a, const char *type)
{
	size_t soap_flag_nAudiNU = 1;
	size_t soap_flag_nDevicePo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetIpcVedioQuality *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetIpcVedioQuality, sizeof(struct mons__GetIpcVedioQuality), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetIpcVedioQuality(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nAudiNU && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nAudiNU", &a->nAudiNU, "xsd:int"))
				{	soap_flag_nAudiNU--;
					continue;
				}
			if (soap_flag_nDevicePo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nDevicePo", &a->nDevicePo, "xsd:int"))
				{	soap_flag_nDevicePo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetIpcVedioQuality *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetIpcVedioQuality, 0, sizeof(struct mons__GetIpcVedioQuality), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nAudiNU > 0 || soap_flag_nDevicePo > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIpcVedioQuality(struct soap *soap, const struct mons__GetIpcVedioQuality *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetIpcVedioQuality);
	if (soap_out_mons__GetIpcVedioQuality(soap, tag?tag:"mons:GetIpcVedioQuality", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetIpcVedioQuality * SOAP_FMAC4 soap_get_mons__GetIpcVedioQuality(struct soap *soap, struct mons__GetIpcVedioQuality *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetIpcVedioQuality(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetIpcVedioQuality * SOAP_FMAC2 soap_instantiate_mons__GetIpcVedioQuality(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetIpcVedioQuality(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetIpcVedioQuality, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetIpcVedioQuality);
		if (size)
			*size = sizeof(struct mons__GetIpcVedioQuality);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetIpcVedioQuality, n);
		if (size)
			*size = n * sizeof(struct mons__GetIpcVedioQuality);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetIpcVedioQuality*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIpcVedioQuality(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetIpcVedioQuality %p -> %p\n", q, p));
	*(struct mons__GetIpcVedioQuality*)p = *(struct mons__GetIpcVedioQuality*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIpcVedioQualityInfoRes(struct soap *soap, struct mons__GetIpcVedioQualityInfoRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_mons__GetIpcVedioQualityInfo(soap, &a->vedioQuality);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIpcVedioQualityInfoRes(struct soap *soap, const struct mons__GetIpcVedioQualityInfoRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mons__GetIpcVedioQualityInfo(soap, &a->vedioQuality);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIpcVedioQualityInfoRes(struct soap *soap, const char *tag, int id, const struct mons__GetIpcVedioQualityInfoRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetIpcVedioQualityInfoRes), type))
		return soap->error;
	if (soap_out_mons__GetIpcVedioQualityInfo(soap, "vedioQuality", -1, &a->vedioQuality, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetIpcVedioQualityInfoRes * SOAP_FMAC4 soap_in_mons__GetIpcVedioQualityInfoRes(struct soap *soap, const char *tag, struct mons__GetIpcVedioQualityInfoRes *a, const char *type)
{
	size_t soap_flag_vedioQuality = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetIpcVedioQualityInfoRes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetIpcVedioQualityInfoRes, sizeof(struct mons__GetIpcVedioQualityInfoRes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_mons__GetIpcVedioQualityInfoRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_vedioQuality && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mons__GetIpcVedioQualityInfo(soap, "vedioQuality", &a->vedioQuality, "mons:GetIpcVedioQualityInfo"))
				{	soap_flag_vedioQuality--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetIpcVedioQualityInfoRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetIpcVedioQualityInfoRes, 0, sizeof(struct mons__GetIpcVedioQualityInfoRes), 0, soap_copy_mons__GetIpcVedioQualityInfoRes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_vedioQuality > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIpcVedioQualityInfoRes(struct soap *soap, const struct mons__GetIpcVedioQualityInfoRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetIpcVedioQualityInfoRes);
	if (soap_out_mons__GetIpcVedioQualityInfoRes(soap, tag?tag:"mons:GetIpcVedioQualityInfoRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetIpcVedioQualityInfoRes * SOAP_FMAC4 soap_get_mons__GetIpcVedioQualityInfoRes(struct soap *soap, struct mons__GetIpcVedioQualityInfoRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetIpcVedioQualityInfoRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetIpcVedioQualityInfoRes * SOAP_FMAC2 soap_instantiate_mons__GetIpcVedioQualityInfoRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetIpcVedioQualityInfoRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetIpcVedioQualityInfoRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetIpcVedioQualityInfoRes);
		if (size)
			*size = sizeof(struct mons__GetIpcVedioQualityInfoRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetIpcVedioQualityInfoRes, n);
		if (size)
			*size = n * sizeof(struct mons__GetIpcVedioQualityInfoRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetIpcVedioQualityInfoRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIpcVedioQualityInfoRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetIpcVedioQualityInfoRes %p -> %p\n", q, p));
	*(struct mons__GetIpcVedioQualityInfoRes*)p = *(struct mons__GetIpcVedioQualityInfoRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIpcVedioQualityInfo(struct soap *soap, struct mons__GetIpcVedioQualityInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->ResoluRatio);
	soap_default_int(soap, &a->frame);
	soap_default_std__string(soap, &a->CodeMode);
	soap_default_int(soap, &a->stream);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIpcVedioQualityInfo(struct soap *soap, const struct mons__GetIpcVedioQualityInfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->ResoluRatio);
	soap_serialize_std__string(soap, &a->CodeMode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIpcVedioQualityInfo(struct soap *soap, const char *tag, int id, const struct mons__GetIpcVedioQualityInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetIpcVedioQualityInfo), type))
		return soap->error;
	if (soap_out_std__string(soap, "ResoluRatio", -1, &a->ResoluRatio, ""))
		return soap->error;
	if (soap_out_int(soap, "frame", -1, &a->frame, ""))
		return soap->error;
	if (soap_out_std__string(soap, "CodeMode", -1, &a->CodeMode, ""))
		return soap->error;
	if (soap_out_int(soap, "stream", -1, &a->stream, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetIpcVedioQualityInfo * SOAP_FMAC4 soap_in_mons__GetIpcVedioQualityInfo(struct soap *soap, const char *tag, struct mons__GetIpcVedioQualityInfo *a, const char *type)
{
	size_t soap_flag_ResoluRatio = 1;
	size_t soap_flag_frame = 1;
	size_t soap_flag_CodeMode = 1;
	size_t soap_flag_stream = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetIpcVedioQualityInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetIpcVedioQualityInfo, sizeof(struct mons__GetIpcVedioQualityInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_mons__GetIpcVedioQualityInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ResoluRatio && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ResoluRatio", &a->ResoluRatio, "xsd:string"))
				{	soap_flag_ResoluRatio--;
					continue;
				}
			if (soap_flag_frame && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "frame", &a->frame, "xsd:int"))
				{	soap_flag_frame--;
					continue;
				}
			if (soap_flag_CodeMode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "CodeMode", &a->CodeMode, "xsd:string"))
				{	soap_flag_CodeMode--;
					continue;
				}
			if (soap_flag_stream && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "stream", &a->stream, "xsd:int"))
				{	soap_flag_stream--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetIpcVedioQualityInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetIpcVedioQualityInfo, 0, sizeof(struct mons__GetIpcVedioQualityInfo), 0, soap_copy_mons__GetIpcVedioQualityInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ResoluRatio > 0 || soap_flag_frame > 0 || soap_flag_CodeMode > 0 || soap_flag_stream > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIpcVedioQualityInfo(struct soap *soap, const struct mons__GetIpcVedioQualityInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetIpcVedioQualityInfo);
	if (soap_out_mons__GetIpcVedioQualityInfo(soap, tag?tag:"mons:GetIpcVedioQualityInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetIpcVedioQualityInfo * SOAP_FMAC4 soap_get_mons__GetIpcVedioQualityInfo(struct soap *soap, struct mons__GetIpcVedioQualityInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetIpcVedioQualityInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetIpcVedioQualityInfo * SOAP_FMAC2 soap_instantiate_mons__GetIpcVedioQualityInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetIpcVedioQualityInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetIpcVedioQualityInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetIpcVedioQualityInfo);
		if (size)
			*size = sizeof(struct mons__GetIpcVedioQualityInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetIpcVedioQualityInfo, n);
		if (size)
			*size = n * sizeof(struct mons__GetIpcVedioQualityInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetIpcVedioQualityInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIpcVedioQualityInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetIpcVedioQualityInfo %p -> %p\n", q, p));
	*(struct mons__GetIpcVedioQualityInfo*)p = *(struct mons__GetIpcVedioQualityInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIpcResoluRatio(struct soap *soap, struct mons__GetIpcResoluRatio *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nAudiNU);
	soap_default_int(soap, &a->nDevicePo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIpcResoluRatio(struct soap *soap, const struct mons__GetIpcResoluRatio *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIpcResoluRatio(struct soap *soap, const char *tag, int id, const struct mons__GetIpcResoluRatio *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetIpcResoluRatio), type))
		return soap->error;
	if (soap_out_int(soap, "nAudiNU", -1, &a->nAudiNU, ""))
		return soap->error;
	if (soap_out_int(soap, "nDevicePo", -1, &a->nDevicePo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetIpcResoluRatio * SOAP_FMAC4 soap_in_mons__GetIpcResoluRatio(struct soap *soap, const char *tag, struct mons__GetIpcResoluRatio *a, const char *type)
{
	size_t soap_flag_nAudiNU = 1;
	size_t soap_flag_nDevicePo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetIpcResoluRatio *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetIpcResoluRatio, sizeof(struct mons__GetIpcResoluRatio), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetIpcResoluRatio(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nAudiNU && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nAudiNU", &a->nAudiNU, "xsd:int"))
				{	soap_flag_nAudiNU--;
					continue;
				}
			if (soap_flag_nDevicePo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nDevicePo", &a->nDevicePo, "xsd:int"))
				{	soap_flag_nDevicePo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetIpcResoluRatio *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetIpcResoluRatio, 0, sizeof(struct mons__GetIpcResoluRatio), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nAudiNU > 0 || soap_flag_nDevicePo > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIpcResoluRatio(struct soap *soap, const struct mons__GetIpcResoluRatio *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetIpcResoluRatio);
	if (soap_out_mons__GetIpcResoluRatio(soap, tag?tag:"mons:GetIpcResoluRatio", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetIpcResoluRatio * SOAP_FMAC4 soap_get_mons__GetIpcResoluRatio(struct soap *soap, struct mons__GetIpcResoluRatio *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetIpcResoluRatio(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetIpcResoluRatio * SOAP_FMAC2 soap_instantiate_mons__GetIpcResoluRatio(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetIpcResoluRatio(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetIpcResoluRatio, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetIpcResoluRatio);
		if (size)
			*size = sizeof(struct mons__GetIpcResoluRatio);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetIpcResoluRatio, n);
		if (size)
			*size = n * sizeof(struct mons__GetIpcResoluRatio);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetIpcResoluRatio*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIpcResoluRatio(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetIpcResoluRatio %p -> %p\n", q, p));
	*(struct mons__GetIpcResoluRatio*)p = *(struct mons__GetIpcResoluRatio*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIpcResoluRatioInfo(struct soap *soap, struct mons__GetIpcResoluRatioInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfstd__string(soap, &a->ResoluRatios);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIpcResoluRatioInfo(struct soap *soap, const struct mons__GetIpcResoluRatioInfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &a->ResoluRatios);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIpcResoluRatioInfo(struct soap *soap, const char *tag, int id, const struct mons__GetIpcResoluRatioInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetIpcResoluRatioInfo), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ResoluRatios", -1, &a->ResoluRatios, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetIpcResoluRatioInfo * SOAP_FMAC4 soap_in_mons__GetIpcResoluRatioInfo(struct soap *soap, const char *tag, struct mons__GetIpcResoluRatioInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetIpcResoluRatioInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetIpcResoluRatioInfo, sizeof(struct mons__GetIpcResoluRatioInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_mons__GetIpcResoluRatioInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "ResoluRatios", &a->ResoluRatios, "xsd:string"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetIpcResoluRatioInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetIpcResoluRatioInfo, 0, sizeof(struct mons__GetIpcResoluRatioInfo), 0, soap_copy_mons__GetIpcResoluRatioInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIpcResoluRatioInfo(struct soap *soap, const struct mons__GetIpcResoluRatioInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetIpcResoluRatioInfo);
	if (soap_out_mons__GetIpcResoluRatioInfo(soap, tag?tag:"mons:GetIpcResoluRatioInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetIpcResoluRatioInfo * SOAP_FMAC4 soap_get_mons__GetIpcResoluRatioInfo(struct soap *soap, struct mons__GetIpcResoluRatioInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetIpcResoluRatioInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetIpcResoluRatioInfo * SOAP_FMAC2 soap_instantiate_mons__GetIpcResoluRatioInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetIpcResoluRatioInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetIpcResoluRatioInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetIpcResoluRatioInfo);
		if (size)
			*size = sizeof(struct mons__GetIpcResoluRatioInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetIpcResoluRatioInfo, n);
		if (size)
			*size = n * sizeof(struct mons__GetIpcResoluRatioInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetIpcResoluRatioInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIpcResoluRatioInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetIpcResoluRatioInfo %p -> %p\n", q, p));
	*(struct mons__GetIpcResoluRatioInfo*)p = *(struct mons__GetIpcResoluRatioInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__DRelease(struct soap *soap, struct mons__DRelease *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__DRelease(struct soap *soap, const struct mons__DRelease *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__DRelease(struct soap *soap, const char *tag, int id, const struct mons__DRelease *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__DRelease), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__DRelease * SOAP_FMAC4 soap_in_mons__DRelease(struct soap *soap, const char *tag, struct mons__DRelease *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__DRelease *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__DRelease, sizeof(struct mons__DRelease), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__DRelease(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__DRelease *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__DRelease, 0, sizeof(struct mons__DRelease), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__DRelease(struct soap *soap, const struct mons__DRelease *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__DRelease);
	if (soap_out_mons__DRelease(soap, tag?tag:"mons:DRelease", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__DRelease * SOAP_FMAC4 soap_get_mons__DRelease(struct soap *soap, struct mons__DRelease *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__DRelease(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__DRelease * SOAP_FMAC2 soap_instantiate_mons__DRelease(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__DRelease(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__DRelease, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__DRelease);
		if (size)
			*size = sizeof(struct mons__DRelease);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__DRelease, n);
		if (size)
			*size = n * sizeof(struct mons__DRelease);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__DRelease*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__DRelease(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__DRelease %p -> %p\n", q, p));
	*(struct mons__DRelease*)p = *(struct mons__DRelease*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__ReleaseRes(struct soap *soap, struct mons__ReleaseRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->isOK);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__ReleaseRes(struct soap *soap, const struct mons__ReleaseRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__ReleaseRes(struct soap *soap, const char *tag, int id, const struct mons__ReleaseRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__ReleaseRes), type))
		return soap->error;
	if (soap_out_bool(soap, "isOK", -1, &a->isOK, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__ReleaseRes * SOAP_FMAC4 soap_in_mons__ReleaseRes(struct soap *soap, const char *tag, struct mons__ReleaseRes *a, const char *type)
{
	size_t soap_flag_isOK = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__ReleaseRes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__ReleaseRes, sizeof(struct mons__ReleaseRes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__ReleaseRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_isOK && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isOK", &a->isOK, "xsd:boolean"))
				{	soap_flag_isOK--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__ReleaseRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__ReleaseRes, 0, sizeof(struct mons__ReleaseRes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isOK > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__ReleaseRes(struct soap *soap, const struct mons__ReleaseRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__ReleaseRes);
	if (soap_out_mons__ReleaseRes(soap, tag?tag:"mons:ReleaseRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__ReleaseRes * SOAP_FMAC4 soap_get_mons__ReleaseRes(struct soap *soap, struct mons__ReleaseRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__ReleaseRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__ReleaseRes * SOAP_FMAC2 soap_instantiate_mons__ReleaseRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__ReleaseRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__ReleaseRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__ReleaseRes);
		if (size)
			*size = sizeof(struct mons__ReleaseRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__ReleaseRes, n);
		if (size)
			*size = n * sizeof(struct mons__ReleaseRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__ReleaseRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__ReleaseRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__ReleaseRes %p -> %p\n", q, p));
	*(struct mons__ReleaseRes*)p = *(struct mons__ReleaseRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__DInit(struct soap *soap, struct mons__DInit *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__DInit(struct soap *soap, const struct mons__DInit *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__DInit(struct soap *soap, const char *tag, int id, const struct mons__DInit *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__DInit), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__DInit * SOAP_FMAC4 soap_in_mons__DInit(struct soap *soap, const char *tag, struct mons__DInit *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__DInit *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__DInit, sizeof(struct mons__DInit), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__DInit(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__DInit *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__DInit, 0, sizeof(struct mons__DInit), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__DInit(struct soap *soap, const struct mons__DInit *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__DInit);
	if (soap_out_mons__DInit(soap, tag?tag:"mons:DInit", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__DInit * SOAP_FMAC4 soap_get_mons__DInit(struct soap *soap, struct mons__DInit *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__DInit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__DInit * SOAP_FMAC2 soap_instantiate_mons__DInit(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__DInit(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__DInit, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__DInit);
		if (size)
			*size = sizeof(struct mons__DInit);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__DInit, n);
		if (size)
			*size = n * sizeof(struct mons__DInit);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__DInit*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__DInit(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__DInit %p -> %p\n", q, p));
	*(struct mons__DInit*)p = *(struct mons__DInit*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__InitRes(struct soap *soap, struct mons__InitRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->isOK);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__InitRes(struct soap *soap, const struct mons__InitRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__InitRes(struct soap *soap, const char *tag, int id, const struct mons__InitRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__InitRes), type))
		return soap->error;
	if (soap_out_bool(soap, "isOK", -1, &a->isOK, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__InitRes * SOAP_FMAC4 soap_in_mons__InitRes(struct soap *soap, const char *tag, struct mons__InitRes *a, const char *type)
{
	size_t soap_flag_isOK = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__InitRes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__InitRes, sizeof(struct mons__InitRes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__InitRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_isOK && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isOK", &a->isOK, "xsd:boolean"))
				{	soap_flag_isOK--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__InitRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__InitRes, 0, sizeof(struct mons__InitRes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isOK > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__InitRes(struct soap *soap, const struct mons__InitRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__InitRes);
	if (soap_out_mons__InitRes(soap, tag?tag:"mons:InitRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__InitRes * SOAP_FMAC4 soap_get_mons__InitRes(struct soap *soap, struct mons__InitRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__InitRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__InitRes * SOAP_FMAC2 soap_instantiate_mons__InitRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__InitRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__InitRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__InitRes);
		if (size)
			*size = sizeof(struct mons__InitRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__InitRes, n);
		if (size)
			*size = n * sizeof(struct mons__InitRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__InitRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__InitRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__InitRes %p -> %p\n", q, p));
	*(struct mons__InitRes*)p = *(struct mons__InitRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetSystemTime(struct soap *soap, struct mons__SetSystemTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_mons__SetSystemtimeInfo(soap, &a->timeInfos);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetSystemTime(struct soap *soap, const struct mons__SetSystemTime *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mons__SetSystemtimeInfo(soap, &a->timeInfos);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetSystemTime(struct soap *soap, const char *tag, int id, const struct mons__SetSystemTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SetSystemTime), type))
		return soap->error;
	if (soap_out_mons__SetSystemtimeInfo(soap, "timeInfos", -1, &a->timeInfos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SetSystemTime * SOAP_FMAC4 soap_in_mons__SetSystemTime(struct soap *soap, const char *tag, struct mons__SetSystemTime *a, const char *type)
{
	size_t soap_flag_timeInfos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SetSystemTime *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SetSystemTime, sizeof(struct mons__SetSystemTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__SetSystemTime(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_timeInfos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mons__SetSystemtimeInfo(soap, "timeInfos", &a->timeInfos, "mons:SetSystemtimeInfo"))
				{	soap_flag_timeInfos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SetSystemTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SetSystemTime, 0, sizeof(struct mons__SetSystemTime), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_timeInfos > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetSystemTime(struct soap *soap, const struct mons__SetSystemTime *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SetSystemTime);
	if (soap_out_mons__SetSystemTime(soap, tag?tag:"mons:SetSystemTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SetSystemTime * SOAP_FMAC4 soap_get_mons__SetSystemTime(struct soap *soap, struct mons__SetSystemTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SetSystemTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SetSystemTime * SOAP_FMAC2 soap_instantiate_mons__SetSystemTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SetSystemTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SetSystemTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SetSystemTime);
		if (size)
			*size = sizeof(struct mons__SetSystemTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SetSystemTime, n);
		if (size)
			*size = n * sizeof(struct mons__SetSystemTime);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SetSystemTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetSystemTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SetSystemTime %p -> %p\n", q, p));
	*(struct mons__SetSystemTime*)p = *(struct mons__SetSystemTime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetSystemInfoRes(struct soap *soap, struct mons__SetSystemInfoRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->isOK);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetSystemInfoRes(struct soap *soap, const struct mons__SetSystemInfoRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetSystemInfoRes(struct soap *soap, const char *tag, int id, const struct mons__SetSystemInfoRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SetSystemInfoRes), type))
		return soap->error;
	if (soap_out_bool(soap, "isOK", -1, &a->isOK, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SetSystemInfoRes * SOAP_FMAC4 soap_in_mons__SetSystemInfoRes(struct soap *soap, const char *tag, struct mons__SetSystemInfoRes *a, const char *type)
{
	size_t soap_flag_isOK = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SetSystemInfoRes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SetSystemInfoRes, sizeof(struct mons__SetSystemInfoRes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__SetSystemInfoRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_isOK && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isOK", &a->isOK, "xsd:boolean"))
				{	soap_flag_isOK--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SetSystemInfoRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SetSystemInfoRes, 0, sizeof(struct mons__SetSystemInfoRes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isOK > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetSystemInfoRes(struct soap *soap, const struct mons__SetSystemInfoRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SetSystemInfoRes);
	if (soap_out_mons__SetSystemInfoRes(soap, tag?tag:"mons:SetSystemInfoRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SetSystemInfoRes * SOAP_FMAC4 soap_get_mons__SetSystemInfoRes(struct soap *soap, struct mons__SetSystemInfoRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SetSystemInfoRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SetSystemInfoRes * SOAP_FMAC2 soap_instantiate_mons__SetSystemInfoRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SetSystemInfoRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SetSystemInfoRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SetSystemInfoRes);
		if (size)
			*size = sizeof(struct mons__SetSystemInfoRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SetSystemInfoRes, n);
		if (size)
			*size = n * sizeof(struct mons__SetSystemInfoRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SetSystemInfoRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetSystemInfoRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SetSystemInfoRes %p -> %p\n", q, p));
	*(struct mons__SetSystemInfoRes*)p = *(struct mons__SetSystemInfoRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetSystemtimeInfo(struct soap *soap, struct mons__SetSystemtimeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->unYear);
	soap_default_unsignedInt(soap, &a->unMonth);
	soap_default_unsignedInt(soap, &a->unDay);
	soap_default_unsignedInt(soap, &a->unHour);
	soap_default_unsignedInt(soap, &a->unMinute);
	soap_default_unsignedInt(soap, &a->unSecond);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetSystemtimeInfo(struct soap *soap, const struct mons__SetSystemtimeInfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetSystemtimeInfo(struct soap *soap, const char *tag, int id, const struct mons__SetSystemtimeInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SetSystemtimeInfo), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unYear", -1, &a->unYear, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unMonth", -1, &a->unMonth, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unDay", -1, &a->unDay, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unHour", -1, &a->unHour, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unMinute", -1, &a->unMinute, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unSecond", -1, &a->unSecond, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SetSystemtimeInfo * SOAP_FMAC4 soap_in_mons__SetSystemtimeInfo(struct soap *soap, const char *tag, struct mons__SetSystemtimeInfo *a, const char *type)
{
	size_t soap_flag_unYear = 1;
	size_t soap_flag_unMonth = 1;
	size_t soap_flag_unDay = 1;
	size_t soap_flag_unHour = 1;
	size_t soap_flag_unMinute = 1;
	size_t soap_flag_unSecond = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SetSystemtimeInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SetSystemtimeInfo, sizeof(struct mons__SetSystemtimeInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__SetSystemtimeInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_unYear && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unYear", &a->unYear, "xsd:unsignedInt"))
				{	soap_flag_unYear--;
					continue;
				}
			if (soap_flag_unMonth && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unMonth", &a->unMonth, "xsd:unsignedInt"))
				{	soap_flag_unMonth--;
					continue;
				}
			if (soap_flag_unDay && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unDay", &a->unDay, "xsd:unsignedInt"))
				{	soap_flag_unDay--;
					continue;
				}
			if (soap_flag_unHour && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unHour", &a->unHour, "xsd:unsignedInt"))
				{	soap_flag_unHour--;
					continue;
				}
			if (soap_flag_unMinute && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unMinute", &a->unMinute, "xsd:unsignedInt"))
				{	soap_flag_unMinute--;
					continue;
				}
			if (soap_flag_unSecond && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unSecond", &a->unSecond, "xsd:unsignedInt"))
				{	soap_flag_unSecond--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SetSystemtimeInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SetSystemtimeInfo, 0, sizeof(struct mons__SetSystemtimeInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_unYear > 0 || soap_flag_unMonth > 0 || soap_flag_unDay > 0 || soap_flag_unHour > 0 || soap_flag_unMinute > 0 || soap_flag_unSecond > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetSystemtimeInfo(struct soap *soap, const struct mons__SetSystemtimeInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SetSystemtimeInfo);
	if (soap_out_mons__SetSystemtimeInfo(soap, tag?tag:"mons:SetSystemtimeInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SetSystemtimeInfo * SOAP_FMAC4 soap_get_mons__SetSystemtimeInfo(struct soap *soap, struct mons__SetSystemtimeInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SetSystemtimeInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SetSystemtimeInfo * SOAP_FMAC2 soap_instantiate_mons__SetSystemtimeInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SetSystemtimeInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SetSystemtimeInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SetSystemtimeInfo);
		if (size)
			*size = sizeof(struct mons__SetSystemtimeInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SetSystemtimeInfo, n);
		if (size)
			*size = n * sizeof(struct mons__SetSystemtimeInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SetSystemtimeInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetSystemtimeInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SetSystemtimeInfo %p -> %p\n", q, p));
	*(struct mons__SetSystemtimeInfo*)p = *(struct mons__SetSystemtimeInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetSystemTimeInfo(struct soap *soap, struct mons__GetSystemTimeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetSystemTimeInfo(struct soap *soap, const struct mons__GetSystemTimeInfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetSystemTimeInfo(struct soap *soap, const char *tag, int id, const struct mons__GetSystemTimeInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetSystemTimeInfo), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetSystemTimeInfo * SOAP_FMAC4 soap_in_mons__GetSystemTimeInfo(struct soap *soap, const char *tag, struct mons__GetSystemTimeInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetSystemTimeInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetSystemTimeInfo, sizeof(struct mons__GetSystemTimeInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetSystemTimeInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetSystemTimeInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetSystemTimeInfo, 0, sizeof(struct mons__GetSystemTimeInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetSystemTimeInfo(struct soap *soap, const struct mons__GetSystemTimeInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetSystemTimeInfo);
	if (soap_out_mons__GetSystemTimeInfo(soap, tag?tag:"mons:GetSystemTimeInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetSystemTimeInfo * SOAP_FMAC4 soap_get_mons__GetSystemTimeInfo(struct soap *soap, struct mons__GetSystemTimeInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetSystemTimeInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetSystemTimeInfo * SOAP_FMAC2 soap_instantiate_mons__GetSystemTimeInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetSystemTimeInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetSystemTimeInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetSystemTimeInfo);
		if (size)
			*size = sizeof(struct mons__GetSystemTimeInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetSystemTimeInfo, n);
		if (size)
			*size = n * sizeof(struct mons__GetSystemTimeInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetSystemTimeInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetSystemTimeInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetSystemTimeInfo %p -> %p\n", q, p));
	*(struct mons__GetSystemTimeInfo*)p = *(struct mons__GetSystemTimeInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetSystemTimeRes(struct soap *soap, struct mons__GetSystemTimeRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->unYear);
	soap_default_unsignedInt(soap, &a->unMonth);
	soap_default_unsignedInt(soap, &a->unDay);
	soap_default_unsignedInt(soap, &a->unHour);
	soap_default_unsignedInt(soap, &a->unMinute);
	soap_default_unsignedInt(soap, &a->unSecond);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetSystemTimeRes(struct soap *soap, const struct mons__GetSystemTimeRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetSystemTimeRes(struct soap *soap, const char *tag, int id, const struct mons__GetSystemTimeRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetSystemTimeRes), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unYear", -1, &a->unYear, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unMonth", -1, &a->unMonth, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unDay", -1, &a->unDay, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unHour", -1, &a->unHour, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unMinute", -1, &a->unMinute, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "unSecond", -1, &a->unSecond, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetSystemTimeRes * SOAP_FMAC4 soap_in_mons__GetSystemTimeRes(struct soap *soap, const char *tag, struct mons__GetSystemTimeRes *a, const char *type)
{
	size_t soap_flag_unYear = 1;
	size_t soap_flag_unMonth = 1;
	size_t soap_flag_unDay = 1;
	size_t soap_flag_unHour = 1;
	size_t soap_flag_unMinute = 1;
	size_t soap_flag_unSecond = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetSystemTimeRes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetSystemTimeRes, sizeof(struct mons__GetSystemTimeRes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetSystemTimeRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_unYear && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unYear", &a->unYear, "xsd:unsignedInt"))
				{	soap_flag_unYear--;
					continue;
				}
			if (soap_flag_unMonth && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unMonth", &a->unMonth, "xsd:unsignedInt"))
				{	soap_flag_unMonth--;
					continue;
				}
			if (soap_flag_unDay && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unDay", &a->unDay, "xsd:unsignedInt"))
				{	soap_flag_unDay--;
					continue;
				}
			if (soap_flag_unHour && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unHour", &a->unHour, "xsd:unsignedInt"))
				{	soap_flag_unHour--;
					continue;
				}
			if (soap_flag_unMinute && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unMinute", &a->unMinute, "xsd:unsignedInt"))
				{	soap_flag_unMinute--;
					continue;
				}
			if (soap_flag_unSecond && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "unSecond", &a->unSecond, "xsd:unsignedInt"))
				{	soap_flag_unSecond--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetSystemTimeRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetSystemTimeRes, 0, sizeof(struct mons__GetSystemTimeRes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_unYear > 0 || soap_flag_unMonth > 0 || soap_flag_unDay > 0 || soap_flag_unHour > 0 || soap_flag_unMinute > 0 || soap_flag_unSecond > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetSystemTimeRes(struct soap *soap, const struct mons__GetSystemTimeRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetSystemTimeRes);
	if (soap_out_mons__GetSystemTimeRes(soap, tag?tag:"mons:GetSystemTimeRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetSystemTimeRes * SOAP_FMAC4 soap_get_mons__GetSystemTimeRes(struct soap *soap, struct mons__GetSystemTimeRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetSystemTimeRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetSystemTimeRes * SOAP_FMAC2 soap_instantiate_mons__GetSystemTimeRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetSystemTimeRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetSystemTimeRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetSystemTimeRes);
		if (size)
			*size = sizeof(struct mons__GetSystemTimeRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetSystemTimeRes, n);
		if (size)
			*size = n * sizeof(struct mons__GetSystemTimeRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetSystemTimeRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetSystemTimeRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetSystemTimeRes %p -> %p\n", q, p));
	*(struct mons__GetSystemTimeRes*)p = *(struct mons__GetSystemTimeRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetIpcInfo(struct soap *soap, struct mons__SetIpcInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->HallNo);
	soap_default_int(soap, &a->ipcPo);
	soap_default_int(soap, &a->channelID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetIpcInfo(struct soap *soap, const struct mons__SetIpcInfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetIpcInfo(struct soap *soap, const char *tag, int id, const struct mons__SetIpcInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SetIpcInfo), type))
		return soap->error;
	if (soap_out_int(soap, "HallNo", -1, &a->HallNo, ""))
		return soap->error;
	if (soap_out_int(soap, "ipcPo", -1, &a->ipcPo, ""))
		return soap->error;
	if (soap_out_int(soap, "channelID", -1, &a->channelID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SetIpcInfo * SOAP_FMAC4 soap_in_mons__SetIpcInfo(struct soap *soap, const char *tag, struct mons__SetIpcInfo *a, const char *type)
{
	size_t soap_flag_HallNo = 1;
	size_t soap_flag_ipcPo = 1;
	size_t soap_flag_channelID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SetIpcInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SetIpcInfo, sizeof(struct mons__SetIpcInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__SetIpcInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_HallNo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "HallNo", &a->HallNo, "xsd:int"))
				{	soap_flag_HallNo--;
					continue;
				}
			if (soap_flag_ipcPo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ipcPo", &a->ipcPo, "xsd:int"))
				{	soap_flag_ipcPo--;
					continue;
				}
			if (soap_flag_channelID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "channelID", &a->channelID, "xsd:int"))
				{	soap_flag_channelID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SetIpcInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SetIpcInfo, 0, sizeof(struct mons__SetIpcInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_HallNo > 0 || soap_flag_ipcPo > 0 || soap_flag_channelID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetIpcInfo(struct soap *soap, const struct mons__SetIpcInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SetIpcInfo);
	if (soap_out_mons__SetIpcInfo(soap, tag?tag:"mons:SetIpcInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SetIpcInfo * SOAP_FMAC4 soap_get_mons__SetIpcInfo(struct soap *soap, struct mons__SetIpcInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SetIpcInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SetIpcInfo * SOAP_FMAC2 soap_instantiate_mons__SetIpcInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SetIpcInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SetIpcInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SetIpcInfo);
		if (size)
			*size = sizeof(struct mons__SetIpcInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SetIpcInfo, n);
		if (size)
			*size = n * sizeof(struct mons__SetIpcInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SetIpcInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetIpcInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SetIpcInfo %p -> %p\n", q, p));
	*(struct mons__SetIpcInfo*)p = *(struct mons__SetIpcInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetIpcInfoRes(struct soap *soap, struct mons__SetIpcInfoRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->isOK);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetIpcInfoRes(struct soap *soap, const struct mons__SetIpcInfoRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetIpcInfoRes(struct soap *soap, const char *tag, int id, const struct mons__SetIpcInfoRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SetIpcInfoRes), type))
		return soap->error;
	if (soap_out_bool(soap, "isOK", -1, &a->isOK, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SetIpcInfoRes * SOAP_FMAC4 soap_in_mons__SetIpcInfoRes(struct soap *soap, const char *tag, struct mons__SetIpcInfoRes *a, const char *type)
{
	size_t soap_flag_isOK = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SetIpcInfoRes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SetIpcInfoRes, sizeof(struct mons__SetIpcInfoRes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__SetIpcInfoRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_isOK && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isOK", &a->isOK, "xsd:boolean"))
				{	soap_flag_isOK--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SetIpcInfoRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SetIpcInfoRes, 0, sizeof(struct mons__SetIpcInfoRes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isOK > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetIpcInfoRes(struct soap *soap, const struct mons__SetIpcInfoRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SetIpcInfoRes);
	if (soap_out_mons__SetIpcInfoRes(soap, tag?tag:"mons:SetIpcInfoRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SetIpcInfoRes * SOAP_FMAC4 soap_get_mons__SetIpcInfoRes(struct soap *soap, struct mons__SetIpcInfoRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SetIpcInfoRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SetIpcInfoRes * SOAP_FMAC2 soap_instantiate_mons__SetIpcInfoRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SetIpcInfoRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SetIpcInfoRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SetIpcInfoRes);
		if (size)
			*size = sizeof(struct mons__SetIpcInfoRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SetIpcInfoRes, n);
		if (size)
			*size = n * sizeof(struct mons__SetIpcInfoRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SetIpcInfoRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetIpcInfoRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SetIpcInfoRes %p -> %p\n", q, p));
	*(struct mons__SetIpcInfoRes*)p = *(struct mons__SetIpcInfoRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__IPCINFO(struct soap *soap, struct mons__IPCINFO *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->HallNo);
	soap_default_int(soap, &a->ipcPo);
	soap_default_int(soap, &a->channelID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__IPCINFO(struct soap *soap, const struct mons__IPCINFO *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__IPCINFO(struct soap *soap, const char *tag, int id, const struct mons__IPCINFO *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__IPCINFO), type))
		return soap->error;
	if (soap_out_int(soap, "HallNo", -1, &a->HallNo, ""))
		return soap->error;
	if (soap_out_int(soap, "ipcPo", -1, &a->ipcPo, ""))
		return soap->error;
	if (soap_out_int(soap, "channelID", -1, &a->channelID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__IPCINFO * SOAP_FMAC4 soap_in_mons__IPCINFO(struct soap *soap, const char *tag, struct mons__IPCINFO *a, const char *type)
{
	size_t soap_flag_HallNo = 1;
	size_t soap_flag_ipcPo = 1;
	size_t soap_flag_channelID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__IPCINFO *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__IPCINFO, sizeof(struct mons__IPCINFO), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__IPCINFO(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_HallNo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "HallNo", &a->HallNo, "xsd:int"))
				{	soap_flag_HallNo--;
					continue;
				}
			if (soap_flag_ipcPo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ipcPo", &a->ipcPo, "xsd:int"))
				{	soap_flag_ipcPo--;
					continue;
				}
			if (soap_flag_channelID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "channelID", &a->channelID, "xsd:int"))
				{	soap_flag_channelID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__IPCINFO *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__IPCINFO, 0, sizeof(struct mons__IPCINFO), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_HallNo > 0 || soap_flag_ipcPo > 0 || soap_flag_channelID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__IPCINFO(struct soap *soap, const struct mons__IPCINFO *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__IPCINFO);
	if (soap_out_mons__IPCINFO(soap, tag?tag:"mons:IPCINFO", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__IPCINFO * SOAP_FMAC4 soap_get_mons__IPCINFO(struct soap *soap, struct mons__IPCINFO *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__IPCINFO(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__IPCINFO * SOAP_FMAC2 soap_instantiate_mons__IPCINFO(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__IPCINFO(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__IPCINFO, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__IPCINFO);
		if (size)
			*size = sizeof(struct mons__IPCINFO);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__IPCINFO, n);
		if (size)
			*size = n * sizeof(struct mons__IPCINFO);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__IPCINFO*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__IPCINFO(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__IPCINFO %p -> %p\n", q, p));
	*(struct mons__IPCINFO*)p = *(struct mons__IPCINFO*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__DownLoadByTime(struct soap *soap, struct mons__DownLoadByTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->id);
	soap_default_int(soap, &a->nAudiNU);
	soap_default_int(soap, &a->nDevicePo);
	soap_default_mons__DownloadTime(soap, &a->tmStart);
	soap_default_mons__DownloadTime(soap, &a->tmEnd);
	soap_default_std__string(soap, &a->storePath);
	soap_default_std__string(soap, &a->mp4name);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__DownLoadByTime(struct soap *soap, const struct mons__DownLoadByTime *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mons__DownloadTime(soap, &a->tmStart);
	soap_serialize_mons__DownloadTime(soap, &a->tmEnd);
	soap_serialize_std__string(soap, &a->storePath);
	soap_serialize_std__string(soap, &a->mp4name);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__DownLoadByTime(struct soap *soap, const char *tag, int id, const struct mons__DownLoadByTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__DownLoadByTime), type))
		return soap->error;
	if (soap_out_int(soap, "id", -1, &a->id, ""))
		return soap->error;
	if (soap_out_int(soap, "nAudiNU", -1, &a->nAudiNU, ""))
		return soap->error;
	if (soap_out_int(soap, "nDevicePo", -1, &a->nDevicePo, ""))
		return soap->error;
	if (soap_out_mons__DownloadTime(soap, "tmStart", -1, &a->tmStart, ""))
		return soap->error;
	if (soap_out_mons__DownloadTime(soap, "tmEnd", -1, &a->tmEnd, ""))
		return soap->error;
	if (soap_out_std__string(soap, "storePath", -1, &a->storePath, ""))
		return soap->error;
	if (soap_out_std__string(soap, "mp4name", -1, &a->mp4name, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__DownLoadByTime * SOAP_FMAC4 soap_in_mons__DownLoadByTime(struct soap *soap, const char *tag, struct mons__DownLoadByTime *a, const char *type)
{
	size_t soap_flag_id = 1;
	size_t soap_flag_nAudiNU = 1;
	size_t soap_flag_nDevicePo = 1;
	size_t soap_flag_tmStart = 1;
	size_t soap_flag_tmEnd = 1;
	size_t soap_flag_storePath = 1;
	size_t soap_flag_mp4name = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__DownLoadByTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mons__DownLoadByTime, sizeof(struct mons__DownLoadByTime), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_mons__DownLoadByTime(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "id", &a->id, "xsd:int"))
				{	soap_flag_id--;
					continue;
				}
			if (soap_flag_nAudiNU && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nAudiNU", &a->nAudiNU, "xsd:int"))
				{	soap_flag_nAudiNU--;
					continue;
				}
			if (soap_flag_nDevicePo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nDevicePo", &a->nDevicePo, "xsd:int"))
				{	soap_flag_nDevicePo--;
					continue;
				}
			if (soap_flag_tmStart && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mons__DownloadTime(soap, "tmStart", &a->tmStart, "mons:DownloadTime"))
				{	soap_flag_tmStart--;
					continue;
				}
			if (soap_flag_tmEnd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mons__DownloadTime(soap, "tmEnd", &a->tmEnd, "mons:DownloadTime"))
				{	soap_flag_tmEnd--;
					continue;
				}
			if (soap_flag_storePath && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "storePath", &a->storePath, "xsd:string"))
				{	soap_flag_storePath--;
					continue;
				}
			if (soap_flag_mp4name && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "mp4name", &a->mp4name, "xsd:string"))
				{	soap_flag_mp4name--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__DownLoadByTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__DownLoadByTime, 0, sizeof(struct mons__DownLoadByTime), 0, soap_copy_mons__DownLoadByTime);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id > 0 || soap_flag_nAudiNU > 0 || soap_flag_nDevicePo > 0 || soap_flag_tmStart > 0 || soap_flag_tmEnd > 0 || soap_flag_storePath > 0 || soap_flag_mp4name > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__DownLoadByTime(struct soap *soap, const struct mons__DownLoadByTime *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__DownLoadByTime);
	if (soap_out_mons__DownLoadByTime(soap, tag?tag:"mons:DownLoadByTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__DownLoadByTime * SOAP_FMAC4 soap_get_mons__DownLoadByTime(struct soap *soap, struct mons__DownLoadByTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__DownLoadByTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__DownLoadByTime * SOAP_FMAC2 soap_instantiate_mons__DownLoadByTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__DownLoadByTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__DownLoadByTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__DownLoadByTime);
		if (size)
			*size = sizeof(struct mons__DownLoadByTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__DownLoadByTime, n);
		if (size)
			*size = n * sizeof(struct mons__DownLoadByTime);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__DownLoadByTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__DownLoadByTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__DownLoadByTime %p -> %p\n", q, p));
	*(struct mons__DownLoadByTime*)p = *(struct mons__DownLoadByTime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__DownloadTimeResponse(struct soap *soap, struct mons__DownloadTimeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->id);
	soap_default_std__string(soap, &a->fileNameMp4);
	soap_default_bool(soap, &a->isOK);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__DownloadTimeResponse(struct soap *soap, const struct mons__DownloadTimeResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->fileNameMp4);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__DownloadTimeResponse(struct soap *soap, const char *tag, int id, const struct mons__DownloadTimeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__DownloadTimeResponse), type))
		return soap->error;
	if (soap_out_int(soap, "id", -1, &a->id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "fileNameMp4", -1, &a->fileNameMp4, ""))
		return soap->error;
	if (soap_out_bool(soap, "isOK", -1, &a->isOK, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__DownloadTimeResponse * SOAP_FMAC4 soap_in_mons__DownloadTimeResponse(struct soap *soap, const char *tag, struct mons__DownloadTimeResponse *a, const char *type)
{
	size_t soap_flag_id = 1;
	size_t soap_flag_fileNameMp4 = 1;
	size_t soap_flag_isOK = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__DownloadTimeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mons__DownloadTimeResponse, sizeof(struct mons__DownloadTimeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_mons__DownloadTimeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "id", &a->id, "xsd:int"))
				{	soap_flag_id--;
					continue;
				}
			if (soap_flag_fileNameMp4 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "fileNameMp4", &a->fileNameMp4, "xsd:string"))
				{	soap_flag_fileNameMp4--;
					continue;
				}
			if (soap_flag_isOK && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isOK", &a->isOK, "xsd:boolean"))
				{	soap_flag_isOK--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__DownloadTimeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__DownloadTimeResponse, 0, sizeof(struct mons__DownloadTimeResponse), 0, soap_copy_mons__DownloadTimeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id > 0 || soap_flag_fileNameMp4 > 0 || soap_flag_isOK > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__DownloadTimeResponse(struct soap *soap, const struct mons__DownloadTimeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__DownloadTimeResponse);
	if (soap_out_mons__DownloadTimeResponse(soap, tag?tag:"mons:DownloadTimeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__DownloadTimeResponse * SOAP_FMAC4 soap_get_mons__DownloadTimeResponse(struct soap *soap, struct mons__DownloadTimeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__DownloadTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__DownloadTimeResponse * SOAP_FMAC2 soap_instantiate_mons__DownloadTimeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__DownloadTimeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__DownloadTimeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__DownloadTimeResponse);
		if (size)
			*size = sizeof(struct mons__DownloadTimeResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__DownloadTimeResponse, n);
		if (size)
			*size = n * sizeof(struct mons__DownloadTimeResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__DownloadTimeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__DownloadTimeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__DownloadTimeResponse %p -> %p\n", q, p));
	*(struct mons__DownloadTimeResponse*)p = *(struct mons__DownloadTimeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__DownloadTime(struct soap *soap, struct mons__DownloadTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->dwYear);
	soap_default_unsignedInt(soap, &a->dwMonth);
	soap_default_unsignedInt(soap, &a->dwDay);
	soap_default_unsignedInt(soap, &a->dwHour);
	soap_default_unsignedInt(soap, &a->dwMinute);
	soap_default_unsignedInt(soap, &a->dwSecond);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__DownloadTime(struct soap *soap, const struct mons__DownloadTime *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__DownloadTime(struct soap *soap, const char *tag, int id, const struct mons__DownloadTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__DownloadTime), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "dwYear", -1, &a->dwYear, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "dwMonth", -1, &a->dwMonth, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "dwDay", -1, &a->dwDay, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "dwHour", -1, &a->dwHour, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "dwMinute", -1, &a->dwMinute, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "dwSecond", -1, &a->dwSecond, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__DownloadTime * SOAP_FMAC4 soap_in_mons__DownloadTime(struct soap *soap, const char *tag, struct mons__DownloadTime *a, const char *type)
{
	size_t soap_flag_dwYear = 1;
	size_t soap_flag_dwMonth = 1;
	size_t soap_flag_dwDay = 1;
	size_t soap_flag_dwHour = 1;
	size_t soap_flag_dwMinute = 1;
	size_t soap_flag_dwSecond = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__DownloadTime *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__DownloadTime, sizeof(struct mons__DownloadTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__DownloadTime(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dwYear && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "dwYear", &a->dwYear, "xsd:unsignedInt"))
				{	soap_flag_dwYear--;
					continue;
				}
			if (soap_flag_dwMonth && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "dwMonth", &a->dwMonth, "xsd:unsignedInt"))
				{	soap_flag_dwMonth--;
					continue;
				}
			if (soap_flag_dwDay && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "dwDay", &a->dwDay, "xsd:unsignedInt"))
				{	soap_flag_dwDay--;
					continue;
				}
			if (soap_flag_dwHour && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "dwHour", &a->dwHour, "xsd:unsignedInt"))
				{	soap_flag_dwHour--;
					continue;
				}
			if (soap_flag_dwMinute && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "dwMinute", &a->dwMinute, "xsd:unsignedInt"))
				{	soap_flag_dwMinute--;
					continue;
				}
			if (soap_flag_dwSecond && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "dwSecond", &a->dwSecond, "xsd:unsignedInt"))
				{	soap_flag_dwSecond--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__DownloadTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__DownloadTime, 0, sizeof(struct mons__DownloadTime), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_dwYear > 0 || soap_flag_dwMonth > 0 || soap_flag_dwDay > 0 || soap_flag_dwHour > 0 || soap_flag_dwMinute > 0 || soap_flag_dwSecond > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__DownloadTime(struct soap *soap, const struct mons__DownloadTime *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__DownloadTime);
	if (soap_out_mons__DownloadTime(soap, tag?tag:"mons:DownloadTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__DownloadTime * SOAP_FMAC4 soap_get_mons__DownloadTime(struct soap *soap, struct mons__DownloadTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__DownloadTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__DownloadTime * SOAP_FMAC2 soap_instantiate_mons__DownloadTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__DownloadTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__DownloadTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__DownloadTime);
		if (size)
			*size = sizeof(struct mons__DownloadTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__DownloadTime, n);
		if (size)
			*size = n * sizeof(struct mons__DownloadTime);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__DownloadTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__DownloadTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__DownloadTime %p -> %p\n", q, p));
	*(struct mons__DownloadTime*)p = *(struct mons__DownloadTime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetDlSpeed(struct soap *soap, struct mons__SetDlSpeed *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->isOK);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetDlSpeed(struct soap *soap, const struct mons__SetDlSpeed *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetDlSpeed(struct soap *soap, const char *tag, int id, const struct mons__SetDlSpeed *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SetDlSpeed), type))
		return soap->error;
	if (soap_out_bool(soap, "isOK", -1, &a->isOK, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SetDlSpeed * SOAP_FMAC4 soap_in_mons__SetDlSpeed(struct soap *soap, const char *tag, struct mons__SetDlSpeed *a, const char *type)
{
	size_t soap_flag_isOK = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SetDlSpeed *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SetDlSpeed, sizeof(struct mons__SetDlSpeed), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__SetDlSpeed(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_isOK && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isOK", &a->isOK, "xsd:boolean"))
				{	soap_flag_isOK--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SetDlSpeed *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SetDlSpeed, 0, sizeof(struct mons__SetDlSpeed), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isOK > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetDlSpeed(struct soap *soap, const struct mons__SetDlSpeed *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SetDlSpeed);
	if (soap_out_mons__SetDlSpeed(soap, tag?tag:"mons:SetDlSpeed", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SetDlSpeed * SOAP_FMAC4 soap_get_mons__SetDlSpeed(struct soap *soap, struct mons__SetDlSpeed *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SetDlSpeed(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SetDlSpeed * SOAP_FMAC2 soap_instantiate_mons__SetDlSpeed(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SetDlSpeed(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SetDlSpeed, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SetDlSpeed);
		if (size)
			*size = sizeof(struct mons__SetDlSpeed);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SetDlSpeed, n);
		if (size)
			*size = n * sizeof(struct mons__SetDlSpeed);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SetDlSpeed*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetDlSpeed(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SetDlSpeed %p -> %p\n", q, p));
	*(struct mons__SetDlSpeed*)p = *(struct mons__SetDlSpeed*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetDLSpeedResponse(struct soap *soap, struct mons__SetDLSpeedResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->isTrue);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetDLSpeedResponse(struct soap *soap, const struct mons__SetDLSpeedResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetDLSpeedResponse(struct soap *soap, const char *tag, int id, const struct mons__SetDLSpeedResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SetDLSpeedResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "isTrue", -1, &a->isTrue, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SetDLSpeedResponse * SOAP_FMAC4 soap_in_mons__SetDLSpeedResponse(struct soap *soap, const char *tag, struct mons__SetDLSpeedResponse *a, const char *type)
{
	size_t soap_flag_isTrue = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SetDLSpeedResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SetDLSpeedResponse, sizeof(struct mons__SetDLSpeedResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__SetDLSpeedResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_isTrue && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isTrue", &a->isTrue, "xsd:boolean"))
				{	soap_flag_isTrue--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SetDLSpeedResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SetDLSpeedResponse, 0, sizeof(struct mons__SetDLSpeedResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isTrue > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetDLSpeedResponse(struct soap *soap, const struct mons__SetDLSpeedResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SetDLSpeedResponse);
	if (soap_out_mons__SetDLSpeedResponse(soap, tag?tag:"mons:SetDLSpeedResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SetDLSpeedResponse * SOAP_FMAC4 soap_get_mons__SetDLSpeedResponse(struct soap *soap, struct mons__SetDLSpeedResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SetDLSpeedResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SetDLSpeedResponse * SOAP_FMAC2 soap_instantiate_mons__SetDLSpeedResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SetDLSpeedResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SetDLSpeedResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SetDLSpeedResponse);
		if (size)
			*size = sizeof(struct mons__SetDLSpeedResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SetDLSpeedResponse, n);
		if (size)
			*size = n * sizeof(struct mons__SetDLSpeedResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SetDLSpeedResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetDLSpeedResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SetDLSpeedResponse %p -> %p\n", q, p));
	*(struct mons__SetDLSpeedResponse*)p = *(struct mons__SetDLSpeedResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetoneInfos(struct soap *soap, struct mons__GetoneInfos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetoneInfos(struct soap *soap, const struct mons__GetoneInfos *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetoneInfos(struct soap *soap, const char *tag, int id, const struct mons__GetoneInfos *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetoneInfos), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetoneInfos * SOAP_FMAC4 soap_in_mons__GetoneInfos(struct soap *soap, const char *tag, struct mons__GetoneInfos *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetoneInfos *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetoneInfos, sizeof(struct mons__GetoneInfos), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetoneInfos(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetoneInfos *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetoneInfos, 0, sizeof(struct mons__GetoneInfos), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetoneInfos(struct soap *soap, const struct mons__GetoneInfos *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetoneInfos);
	if (soap_out_mons__GetoneInfos(soap, tag?tag:"mons:GetoneInfos", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetoneInfos * SOAP_FMAC4 soap_get_mons__GetoneInfos(struct soap *soap, struct mons__GetoneInfos *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetoneInfos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetoneInfos * SOAP_FMAC2 soap_instantiate_mons__GetoneInfos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetoneInfos(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetoneInfos, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetoneInfos);
		if (size)
			*size = sizeof(struct mons__GetoneInfos);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetoneInfos, n);
		if (size)
			*size = n * sizeof(struct mons__GetoneInfos);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetoneInfos*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetoneInfos(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetoneInfos %p -> %p\n", q, p));
	*(struct mons__GetoneInfos*)p = *(struct mons__GetoneInfos*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__get1(struct soap *soap, struct mons__get1 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->i);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__get1(struct soap *soap, const struct mons__get1 *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__get1(struct soap *soap, const char *tag, int id, const struct mons__get1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__get1), type))
		return soap->error;
	if (soap_out_int(soap, "i", -1, &a->i, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__get1 * SOAP_FMAC4 soap_in_mons__get1(struct soap *soap, const char *tag, struct mons__get1 *a, const char *type)
{
	size_t soap_flag_i = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__get1 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__get1, sizeof(struct mons__get1), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__get1(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_i && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "i", &a->i, "xsd:int"))
				{	soap_flag_i--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__get1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__get1, 0, sizeof(struct mons__get1), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_i > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__get1(struct soap *soap, const struct mons__get1 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__get1);
	if (soap_out_mons__get1(soap, tag?tag:"mons:get1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__get1 * SOAP_FMAC4 soap_get_mons__get1(struct soap *soap, struct mons__get1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__get1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__get1 * SOAP_FMAC2 soap_instantiate_mons__get1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__get1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__get1, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__get1);
		if (size)
			*size = sizeof(struct mons__get1);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__get1, n);
		if (size)
			*size = n * sizeof(struct mons__get1);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__get1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__get1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__get1 %p -> %p\n", q, p));
	*(struct mons__get1*)p = *(struct mons__get1*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	std::string n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_std__string(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<std::string >, n);
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
