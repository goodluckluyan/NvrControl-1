/* soapH.h
   Generated by gSOAP 2.8.18 from webservice.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data),0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_mons__SetIpcVedioQuality
#define SOAP_TYPE_mons__SetIpcVedioQuality (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetIpcVedioQuality(struct soap*, struct mons__SetIpcVedioQuality *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetIpcVedioQuality(struct soap*, const struct mons__SetIpcVedioQuality *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetIpcVedioQuality(struct soap*, const char*, int, const struct mons__SetIpcVedioQuality *, const char*);
SOAP_FMAC3 struct mons__SetIpcVedioQuality * SOAP_FMAC4 soap_in_mons__SetIpcVedioQuality(struct soap*, const char*, struct mons__SetIpcVedioQuality *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetIpcVedioQuality(struct soap*, const struct mons__SetIpcVedioQuality *, const char*, const char*);

#ifndef soap_write_mons__SetIpcVedioQuality
#define soap_write_mons__SetIpcVedioQuality(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SetIpcVedioQuality(soap, data),0) || soap_put_mons__SetIpcVedioQuality(soap, data, "mons:SetIpcVedioQuality", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SetIpcVedioQuality * SOAP_FMAC4 soap_get_mons__SetIpcVedioQuality(struct soap*, struct mons__SetIpcVedioQuality *, const char*, const char*);

#ifndef soap_read_mons__SetIpcVedioQuality
#define soap_read_mons__SetIpcVedioQuality(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SetIpcVedioQuality(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SetIpcVedioQuality * SOAP_FMAC2 soap_instantiate_mons__SetIpcVedioQuality(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SetIpcVedioQuality * soap_new_mons__SetIpcVedioQuality(struct soap *soap, int n = -1) { return soap_instantiate_mons__SetIpcVedioQuality(soap, n, NULL, NULL, NULL); }

inline struct mons__SetIpcVedioQuality * soap_new_req_mons__SetIpcVedioQuality(struct soap *soap, int nAudiNU, int nDevicePo, struct mons__SetIpcVedioQualityInfo& vedioInfo) { struct mons__SetIpcVedioQuality *_p = soap_instantiate_mons__SetIpcVedioQuality(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetIpcVedioQuality(soap, _p); _p->nAudiNU = nAudiNU; _p->nDevicePo = nDevicePo; _p->vedioInfo = vedioInfo; } return _p; }

inline struct mons__SetIpcVedioQuality * soap_new_set_mons__SetIpcVedioQuality(struct soap *soap, int nAudiNU, int nDevicePo, struct mons__SetIpcVedioQualityInfo& vedioInfo) { struct mons__SetIpcVedioQuality *_p = soap_instantiate_mons__SetIpcVedioQuality(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetIpcVedioQuality(soap, _p); _p->nAudiNU = nAudiNU; _p->nDevicePo = nDevicePo; _p->vedioInfo = vedioInfo; } return _p; }

inline void soap_delete_mons__SetIpcVedioQuality(struct soap *soap, struct mons__SetIpcVedioQuality *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetIpcVedioQuality(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SetIpcVedioQualityInfoRes
#define SOAP_TYPE_mons__SetIpcVedioQualityInfoRes (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetIpcVedioQualityInfoRes(struct soap*, struct mons__SetIpcVedioQualityInfoRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetIpcVedioQualityInfoRes(struct soap*, const struct mons__SetIpcVedioQualityInfoRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetIpcVedioQualityInfoRes(struct soap*, const char*, int, const struct mons__SetIpcVedioQualityInfoRes *, const char*);
SOAP_FMAC3 struct mons__SetIpcVedioQualityInfoRes * SOAP_FMAC4 soap_in_mons__SetIpcVedioQualityInfoRes(struct soap*, const char*, struct mons__SetIpcVedioQualityInfoRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetIpcVedioQualityInfoRes(struct soap*, const struct mons__SetIpcVedioQualityInfoRes *, const char*, const char*);

#ifndef soap_write_mons__SetIpcVedioQualityInfoRes
#define soap_write_mons__SetIpcVedioQualityInfoRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SetIpcVedioQualityInfoRes(soap, data),0) || soap_put_mons__SetIpcVedioQualityInfoRes(soap, data, "mons:SetIpcVedioQualityInfoRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SetIpcVedioQualityInfoRes * SOAP_FMAC4 soap_get_mons__SetIpcVedioQualityInfoRes(struct soap*, struct mons__SetIpcVedioQualityInfoRes *, const char*, const char*);

#ifndef soap_read_mons__SetIpcVedioQualityInfoRes
#define soap_read_mons__SetIpcVedioQualityInfoRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SetIpcVedioQualityInfoRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SetIpcVedioQualityInfoRes * SOAP_FMAC2 soap_instantiate_mons__SetIpcVedioQualityInfoRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SetIpcVedioQualityInfoRes * soap_new_mons__SetIpcVedioQualityInfoRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__SetIpcVedioQualityInfoRes(soap, n, NULL, NULL, NULL); }

inline struct mons__SetIpcVedioQualityInfoRes * soap_new_req_mons__SetIpcVedioQualityInfoRes(struct soap *soap, bool isOK) { struct mons__SetIpcVedioQualityInfoRes *_p = soap_instantiate_mons__SetIpcVedioQualityInfoRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetIpcVedioQualityInfoRes(soap, _p); _p->isOK = isOK; } return _p; }

inline struct mons__SetIpcVedioQualityInfoRes * soap_new_set_mons__SetIpcVedioQualityInfoRes(struct soap *soap, bool isOK) { struct mons__SetIpcVedioQualityInfoRes *_p = soap_instantiate_mons__SetIpcVedioQualityInfoRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetIpcVedioQualityInfoRes(soap, _p); _p->isOK = isOK; } return _p; }

inline void soap_delete_mons__SetIpcVedioQualityInfoRes(struct soap *soap, struct mons__SetIpcVedioQualityInfoRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetIpcVedioQualityInfoRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SetIpcVedioQualityInfo
#define SOAP_TYPE_mons__SetIpcVedioQualityInfo (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetIpcVedioQualityInfo(struct soap*, struct mons__SetIpcVedioQualityInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetIpcVedioQualityInfo(struct soap*, const struct mons__SetIpcVedioQualityInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetIpcVedioQualityInfo(struct soap*, const char*, int, const struct mons__SetIpcVedioQualityInfo *, const char*);
SOAP_FMAC3 struct mons__SetIpcVedioQualityInfo * SOAP_FMAC4 soap_in_mons__SetIpcVedioQualityInfo(struct soap*, const char*, struct mons__SetIpcVedioQualityInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetIpcVedioQualityInfo(struct soap*, const struct mons__SetIpcVedioQualityInfo *, const char*, const char*);

#ifndef soap_write_mons__SetIpcVedioQualityInfo
#define soap_write_mons__SetIpcVedioQualityInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SetIpcVedioQualityInfo(soap, data),0) || soap_put_mons__SetIpcVedioQualityInfo(soap, data, "mons:SetIpcVedioQualityInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SetIpcVedioQualityInfo * SOAP_FMAC4 soap_get_mons__SetIpcVedioQualityInfo(struct soap*, struct mons__SetIpcVedioQualityInfo *, const char*, const char*);

#ifndef soap_read_mons__SetIpcVedioQualityInfo
#define soap_read_mons__SetIpcVedioQualityInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SetIpcVedioQualityInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SetIpcVedioQualityInfo * SOAP_FMAC2 soap_instantiate_mons__SetIpcVedioQualityInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SetIpcVedioQualityInfo * soap_new_mons__SetIpcVedioQualityInfo(struct soap *soap, int n = -1) { return soap_instantiate_mons__SetIpcVedioQualityInfo(soap, n, NULL, NULL, NULL); }

inline struct mons__SetIpcVedioQualityInfo * soap_new_req_mons__SetIpcVedioQualityInfo(struct soap *soap, std::string& ResoluRatio, int frame, std::string& CodeMode, int stream) { struct mons__SetIpcVedioQualityInfo *_p = soap_instantiate_mons__SetIpcVedioQualityInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetIpcVedioQualityInfo(soap, _p); _p->ResoluRatio = ResoluRatio; _p->frame = frame; _p->CodeMode = CodeMode; _p->stream = stream; } return _p; }

inline struct mons__SetIpcVedioQualityInfo * soap_new_set_mons__SetIpcVedioQualityInfo(struct soap *soap, std::string& ResoluRatio, int frame, std::string& CodeMode, int stream) { struct mons__SetIpcVedioQualityInfo *_p = soap_instantiate_mons__SetIpcVedioQualityInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetIpcVedioQualityInfo(soap, _p); _p->ResoluRatio = ResoluRatio; _p->frame = frame; _p->CodeMode = CodeMode; _p->stream = stream; } return _p; }

inline void soap_delete_mons__SetIpcVedioQualityInfo(struct soap *soap, struct mons__SetIpcVedioQualityInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetIpcVedioQualityInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetIpcVedioQuality
#define SOAP_TYPE_mons__GetIpcVedioQuality (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIpcVedioQuality(struct soap*, struct mons__GetIpcVedioQuality *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIpcVedioQuality(struct soap*, const struct mons__GetIpcVedioQuality *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIpcVedioQuality(struct soap*, const char*, int, const struct mons__GetIpcVedioQuality *, const char*);
SOAP_FMAC3 struct mons__GetIpcVedioQuality * SOAP_FMAC4 soap_in_mons__GetIpcVedioQuality(struct soap*, const char*, struct mons__GetIpcVedioQuality *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIpcVedioQuality(struct soap*, const struct mons__GetIpcVedioQuality *, const char*, const char*);

#ifndef soap_write_mons__GetIpcVedioQuality
#define soap_write_mons__GetIpcVedioQuality(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetIpcVedioQuality(soap, data),0) || soap_put_mons__GetIpcVedioQuality(soap, data, "mons:GetIpcVedioQuality", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetIpcVedioQuality * SOAP_FMAC4 soap_get_mons__GetIpcVedioQuality(struct soap*, struct mons__GetIpcVedioQuality *, const char*, const char*);

#ifndef soap_read_mons__GetIpcVedioQuality
#define soap_read_mons__GetIpcVedioQuality(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetIpcVedioQuality(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetIpcVedioQuality * SOAP_FMAC2 soap_instantiate_mons__GetIpcVedioQuality(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetIpcVedioQuality * soap_new_mons__GetIpcVedioQuality(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetIpcVedioQuality(soap, n, NULL, NULL, NULL); }

inline struct mons__GetIpcVedioQuality * soap_new_req_mons__GetIpcVedioQuality(struct soap *soap, int nAudiNU, int nDevicePo) { struct mons__GetIpcVedioQuality *_p = soap_instantiate_mons__GetIpcVedioQuality(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIpcVedioQuality(soap, _p); _p->nAudiNU = nAudiNU; _p->nDevicePo = nDevicePo; } return _p; }

inline struct mons__GetIpcVedioQuality * soap_new_set_mons__GetIpcVedioQuality(struct soap *soap, int nAudiNU, int nDevicePo) { struct mons__GetIpcVedioQuality *_p = soap_instantiate_mons__GetIpcVedioQuality(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIpcVedioQuality(soap, _p); _p->nAudiNU = nAudiNU; _p->nDevicePo = nDevicePo; } return _p; }

inline void soap_delete_mons__GetIpcVedioQuality(struct soap *soap, struct mons__GetIpcVedioQuality *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIpcVedioQuality(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetIpcVedioQualityInfoRes
#define SOAP_TYPE_mons__GetIpcVedioQualityInfoRes (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIpcVedioQualityInfoRes(struct soap*, struct mons__GetIpcVedioQualityInfoRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIpcVedioQualityInfoRes(struct soap*, const struct mons__GetIpcVedioQualityInfoRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIpcVedioQualityInfoRes(struct soap*, const char*, int, const struct mons__GetIpcVedioQualityInfoRes *, const char*);
SOAP_FMAC3 struct mons__GetIpcVedioQualityInfoRes * SOAP_FMAC4 soap_in_mons__GetIpcVedioQualityInfoRes(struct soap*, const char*, struct mons__GetIpcVedioQualityInfoRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIpcVedioQualityInfoRes(struct soap*, const struct mons__GetIpcVedioQualityInfoRes *, const char*, const char*);

#ifndef soap_write_mons__GetIpcVedioQualityInfoRes
#define soap_write_mons__GetIpcVedioQualityInfoRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetIpcVedioQualityInfoRes(soap, data),0) || soap_put_mons__GetIpcVedioQualityInfoRes(soap, data, "mons:GetIpcVedioQualityInfoRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetIpcVedioQualityInfoRes * SOAP_FMAC4 soap_get_mons__GetIpcVedioQualityInfoRes(struct soap*, struct mons__GetIpcVedioQualityInfoRes *, const char*, const char*);

#ifndef soap_read_mons__GetIpcVedioQualityInfoRes
#define soap_read_mons__GetIpcVedioQualityInfoRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetIpcVedioQualityInfoRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetIpcVedioQualityInfoRes * SOAP_FMAC2 soap_instantiate_mons__GetIpcVedioQualityInfoRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetIpcVedioQualityInfoRes * soap_new_mons__GetIpcVedioQualityInfoRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetIpcVedioQualityInfoRes(soap, n, NULL, NULL, NULL); }

inline struct mons__GetIpcVedioQualityInfoRes * soap_new_req_mons__GetIpcVedioQualityInfoRes(struct soap *soap, struct mons__GetIpcVedioQualityInfo& vedioQuality) { struct mons__GetIpcVedioQualityInfoRes *_p = soap_instantiate_mons__GetIpcVedioQualityInfoRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIpcVedioQualityInfoRes(soap, _p); _p->vedioQuality = vedioQuality; } return _p; }

inline struct mons__GetIpcVedioQualityInfoRes * soap_new_set_mons__GetIpcVedioQualityInfoRes(struct soap *soap, struct mons__GetIpcVedioQualityInfo& vedioQuality) { struct mons__GetIpcVedioQualityInfoRes *_p = soap_instantiate_mons__GetIpcVedioQualityInfoRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIpcVedioQualityInfoRes(soap, _p); _p->vedioQuality = vedioQuality; } return _p; }

inline void soap_delete_mons__GetIpcVedioQualityInfoRes(struct soap *soap, struct mons__GetIpcVedioQualityInfoRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIpcVedioQualityInfoRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetIpcVedioQualityInfo
#define SOAP_TYPE_mons__GetIpcVedioQualityInfo (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIpcVedioQualityInfo(struct soap*, struct mons__GetIpcVedioQualityInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIpcVedioQualityInfo(struct soap*, const struct mons__GetIpcVedioQualityInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIpcVedioQualityInfo(struct soap*, const char*, int, const struct mons__GetIpcVedioQualityInfo *, const char*);
SOAP_FMAC3 struct mons__GetIpcVedioQualityInfo * SOAP_FMAC4 soap_in_mons__GetIpcVedioQualityInfo(struct soap*, const char*, struct mons__GetIpcVedioQualityInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIpcVedioQualityInfo(struct soap*, const struct mons__GetIpcVedioQualityInfo *, const char*, const char*);

#ifndef soap_write_mons__GetIpcVedioQualityInfo
#define soap_write_mons__GetIpcVedioQualityInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetIpcVedioQualityInfo(soap, data),0) || soap_put_mons__GetIpcVedioQualityInfo(soap, data, "mons:GetIpcVedioQualityInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetIpcVedioQualityInfo * SOAP_FMAC4 soap_get_mons__GetIpcVedioQualityInfo(struct soap*, struct mons__GetIpcVedioQualityInfo *, const char*, const char*);

#ifndef soap_read_mons__GetIpcVedioQualityInfo
#define soap_read_mons__GetIpcVedioQualityInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetIpcVedioQualityInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetIpcVedioQualityInfo * SOAP_FMAC2 soap_instantiate_mons__GetIpcVedioQualityInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetIpcVedioQualityInfo * soap_new_mons__GetIpcVedioQualityInfo(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetIpcVedioQualityInfo(soap, n, NULL, NULL, NULL); }

inline struct mons__GetIpcVedioQualityInfo * soap_new_req_mons__GetIpcVedioQualityInfo(struct soap *soap, std::string& ResoluRatio, int frame, std::string& CodeMode, int stream) { struct mons__GetIpcVedioQualityInfo *_p = soap_instantiate_mons__GetIpcVedioQualityInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIpcVedioQualityInfo(soap, _p); _p->ResoluRatio = ResoluRatio; _p->frame = frame; _p->CodeMode = CodeMode; _p->stream = stream; } return _p; }

inline struct mons__GetIpcVedioQualityInfo * soap_new_set_mons__GetIpcVedioQualityInfo(struct soap *soap, std::string& ResoluRatio, int frame, std::string& CodeMode, int stream) { struct mons__GetIpcVedioQualityInfo *_p = soap_instantiate_mons__GetIpcVedioQualityInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIpcVedioQualityInfo(soap, _p); _p->ResoluRatio = ResoluRatio; _p->frame = frame; _p->CodeMode = CodeMode; _p->stream = stream; } return _p; }

inline void soap_delete_mons__GetIpcVedioQualityInfo(struct soap *soap, struct mons__GetIpcVedioQualityInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIpcVedioQualityInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetIpcResoluRatio
#define SOAP_TYPE_mons__GetIpcResoluRatio (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIpcResoluRatio(struct soap*, struct mons__GetIpcResoluRatio *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIpcResoluRatio(struct soap*, const struct mons__GetIpcResoluRatio *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIpcResoluRatio(struct soap*, const char*, int, const struct mons__GetIpcResoluRatio *, const char*);
SOAP_FMAC3 struct mons__GetIpcResoluRatio * SOAP_FMAC4 soap_in_mons__GetIpcResoluRatio(struct soap*, const char*, struct mons__GetIpcResoluRatio *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIpcResoluRatio(struct soap*, const struct mons__GetIpcResoluRatio *, const char*, const char*);

#ifndef soap_write_mons__GetIpcResoluRatio
#define soap_write_mons__GetIpcResoluRatio(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetIpcResoluRatio(soap, data),0) || soap_put_mons__GetIpcResoluRatio(soap, data, "mons:GetIpcResoluRatio", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetIpcResoluRatio * SOAP_FMAC4 soap_get_mons__GetIpcResoluRatio(struct soap*, struct mons__GetIpcResoluRatio *, const char*, const char*);

#ifndef soap_read_mons__GetIpcResoluRatio
#define soap_read_mons__GetIpcResoluRatio(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetIpcResoluRatio(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetIpcResoluRatio * SOAP_FMAC2 soap_instantiate_mons__GetIpcResoluRatio(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetIpcResoluRatio * soap_new_mons__GetIpcResoluRatio(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetIpcResoluRatio(soap, n, NULL, NULL, NULL); }

inline struct mons__GetIpcResoluRatio * soap_new_req_mons__GetIpcResoluRatio(struct soap *soap, int nAudiNU, int nDevicePo) { struct mons__GetIpcResoluRatio *_p = soap_instantiate_mons__GetIpcResoluRatio(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIpcResoluRatio(soap, _p); _p->nAudiNU = nAudiNU; _p->nDevicePo = nDevicePo; } return _p; }

inline struct mons__GetIpcResoluRatio * soap_new_set_mons__GetIpcResoluRatio(struct soap *soap, int nAudiNU, int nDevicePo) { struct mons__GetIpcResoluRatio *_p = soap_instantiate_mons__GetIpcResoluRatio(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIpcResoluRatio(soap, _p); _p->nAudiNU = nAudiNU; _p->nDevicePo = nDevicePo; } return _p; }

inline void soap_delete_mons__GetIpcResoluRatio(struct soap *soap, struct mons__GetIpcResoluRatio *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIpcResoluRatio(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetIpcResoluRatioInfo
#define SOAP_TYPE_mons__GetIpcResoluRatioInfo (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIpcResoluRatioInfo(struct soap*, struct mons__GetIpcResoluRatioInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIpcResoluRatioInfo(struct soap*, const struct mons__GetIpcResoluRatioInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIpcResoluRatioInfo(struct soap*, const char*, int, const struct mons__GetIpcResoluRatioInfo *, const char*);
SOAP_FMAC3 struct mons__GetIpcResoluRatioInfo * SOAP_FMAC4 soap_in_mons__GetIpcResoluRatioInfo(struct soap*, const char*, struct mons__GetIpcResoluRatioInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIpcResoluRatioInfo(struct soap*, const struct mons__GetIpcResoluRatioInfo *, const char*, const char*);

#ifndef soap_write_mons__GetIpcResoluRatioInfo
#define soap_write_mons__GetIpcResoluRatioInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetIpcResoluRatioInfo(soap, data),0) || soap_put_mons__GetIpcResoluRatioInfo(soap, data, "mons:GetIpcResoluRatioInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetIpcResoluRatioInfo * SOAP_FMAC4 soap_get_mons__GetIpcResoluRatioInfo(struct soap*, struct mons__GetIpcResoluRatioInfo *, const char*, const char*);

#ifndef soap_read_mons__GetIpcResoluRatioInfo
#define soap_read_mons__GetIpcResoluRatioInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetIpcResoluRatioInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetIpcResoluRatioInfo * SOAP_FMAC2 soap_instantiate_mons__GetIpcResoluRatioInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetIpcResoluRatioInfo * soap_new_mons__GetIpcResoluRatioInfo(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetIpcResoluRatioInfo(soap, n, NULL, NULL, NULL); }

inline struct mons__GetIpcResoluRatioInfo * soap_new_req_mons__GetIpcResoluRatioInfo(struct soap *soap) { struct mons__GetIpcResoluRatioInfo *_p = soap_instantiate_mons__GetIpcResoluRatioInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIpcResoluRatioInfo(soap, _p); } return _p; }

inline struct mons__GetIpcResoluRatioInfo * soap_new_set_mons__GetIpcResoluRatioInfo(struct soap *soap, std::vector<std::string >& ResoluRatios) { struct mons__GetIpcResoluRatioInfo *_p = soap_instantiate_mons__GetIpcResoluRatioInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIpcResoluRatioInfo(soap, _p); _p->ResoluRatios = ResoluRatios; } return _p; }

inline void soap_delete_mons__GetIpcResoluRatioInfo(struct soap *soap, struct mons__GetIpcResoluRatioInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIpcResoluRatioInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__DRelease
#define SOAP_TYPE_mons__DRelease (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__DRelease(struct soap*, struct mons__DRelease *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__DRelease(struct soap*, const struct mons__DRelease *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__DRelease(struct soap*, const char*, int, const struct mons__DRelease *, const char*);
SOAP_FMAC3 struct mons__DRelease * SOAP_FMAC4 soap_in_mons__DRelease(struct soap*, const char*, struct mons__DRelease *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__DRelease(struct soap*, const struct mons__DRelease *, const char*, const char*);

#ifndef soap_write_mons__DRelease
#define soap_write_mons__DRelease(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__DRelease(soap, data),0) || soap_put_mons__DRelease(soap, data, "mons:DRelease", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__DRelease * SOAP_FMAC4 soap_get_mons__DRelease(struct soap*, struct mons__DRelease *, const char*, const char*);

#ifndef soap_read_mons__DRelease
#define soap_read_mons__DRelease(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__DRelease(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__DRelease * SOAP_FMAC2 soap_instantiate_mons__DRelease(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__DRelease * soap_new_mons__DRelease(struct soap *soap, int n = -1) { return soap_instantiate_mons__DRelease(soap, n, NULL, NULL, NULL); }

inline struct mons__DRelease * soap_new_req_mons__DRelease(struct soap *soap) { struct mons__DRelease *_p = soap_instantiate_mons__DRelease(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__DRelease(soap, _p); } return _p; }

inline struct mons__DRelease * soap_new_set_mons__DRelease(struct soap *soap) { struct mons__DRelease *_p = soap_instantiate_mons__DRelease(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__DRelease(soap, _p); } return _p; }

inline void soap_delete_mons__DRelease(struct soap *soap, struct mons__DRelease *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__DRelease(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__ReleaseRes
#define SOAP_TYPE_mons__ReleaseRes (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__ReleaseRes(struct soap*, struct mons__ReleaseRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__ReleaseRes(struct soap*, const struct mons__ReleaseRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__ReleaseRes(struct soap*, const char*, int, const struct mons__ReleaseRes *, const char*);
SOAP_FMAC3 struct mons__ReleaseRes * SOAP_FMAC4 soap_in_mons__ReleaseRes(struct soap*, const char*, struct mons__ReleaseRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__ReleaseRes(struct soap*, const struct mons__ReleaseRes *, const char*, const char*);

#ifndef soap_write_mons__ReleaseRes
#define soap_write_mons__ReleaseRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__ReleaseRes(soap, data),0) || soap_put_mons__ReleaseRes(soap, data, "mons:ReleaseRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__ReleaseRes * SOAP_FMAC4 soap_get_mons__ReleaseRes(struct soap*, struct mons__ReleaseRes *, const char*, const char*);

#ifndef soap_read_mons__ReleaseRes
#define soap_read_mons__ReleaseRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__ReleaseRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__ReleaseRes * SOAP_FMAC2 soap_instantiate_mons__ReleaseRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__ReleaseRes * soap_new_mons__ReleaseRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__ReleaseRes(soap, n, NULL, NULL, NULL); }

inline struct mons__ReleaseRes * soap_new_req_mons__ReleaseRes(struct soap *soap, bool isOK) { struct mons__ReleaseRes *_p = soap_instantiate_mons__ReleaseRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ReleaseRes(soap, _p); _p->isOK = isOK; } return _p; }

inline struct mons__ReleaseRes * soap_new_set_mons__ReleaseRes(struct soap *soap, bool isOK) { struct mons__ReleaseRes *_p = soap_instantiate_mons__ReleaseRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ReleaseRes(soap, _p); _p->isOK = isOK; } return _p; }

inline void soap_delete_mons__ReleaseRes(struct soap *soap, struct mons__ReleaseRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__ReleaseRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__DInit
#define SOAP_TYPE_mons__DInit (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__DInit(struct soap*, struct mons__DInit *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__DInit(struct soap*, const struct mons__DInit *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__DInit(struct soap*, const char*, int, const struct mons__DInit *, const char*);
SOAP_FMAC3 struct mons__DInit * SOAP_FMAC4 soap_in_mons__DInit(struct soap*, const char*, struct mons__DInit *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__DInit(struct soap*, const struct mons__DInit *, const char*, const char*);

#ifndef soap_write_mons__DInit
#define soap_write_mons__DInit(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__DInit(soap, data),0) || soap_put_mons__DInit(soap, data, "mons:DInit", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__DInit * SOAP_FMAC4 soap_get_mons__DInit(struct soap*, struct mons__DInit *, const char*, const char*);

#ifndef soap_read_mons__DInit
#define soap_read_mons__DInit(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__DInit(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__DInit * SOAP_FMAC2 soap_instantiate_mons__DInit(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__DInit * soap_new_mons__DInit(struct soap *soap, int n = -1) { return soap_instantiate_mons__DInit(soap, n, NULL, NULL, NULL); }

inline struct mons__DInit * soap_new_req_mons__DInit(struct soap *soap) { struct mons__DInit *_p = soap_instantiate_mons__DInit(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__DInit(soap, _p); } return _p; }

inline struct mons__DInit * soap_new_set_mons__DInit(struct soap *soap) { struct mons__DInit *_p = soap_instantiate_mons__DInit(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__DInit(soap, _p); } return _p; }

inline void soap_delete_mons__DInit(struct soap *soap, struct mons__DInit *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__DInit(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__InitRes
#define SOAP_TYPE_mons__InitRes (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__InitRes(struct soap*, struct mons__InitRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__InitRes(struct soap*, const struct mons__InitRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__InitRes(struct soap*, const char*, int, const struct mons__InitRes *, const char*);
SOAP_FMAC3 struct mons__InitRes * SOAP_FMAC4 soap_in_mons__InitRes(struct soap*, const char*, struct mons__InitRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__InitRes(struct soap*, const struct mons__InitRes *, const char*, const char*);

#ifndef soap_write_mons__InitRes
#define soap_write_mons__InitRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__InitRes(soap, data),0) || soap_put_mons__InitRes(soap, data, "mons:InitRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__InitRes * SOAP_FMAC4 soap_get_mons__InitRes(struct soap*, struct mons__InitRes *, const char*, const char*);

#ifndef soap_read_mons__InitRes
#define soap_read_mons__InitRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__InitRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__InitRes * SOAP_FMAC2 soap_instantiate_mons__InitRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__InitRes * soap_new_mons__InitRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__InitRes(soap, n, NULL, NULL, NULL); }

inline struct mons__InitRes * soap_new_req_mons__InitRes(struct soap *soap, bool isOK) { struct mons__InitRes *_p = soap_instantiate_mons__InitRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__InitRes(soap, _p); _p->isOK = isOK; } return _p; }

inline struct mons__InitRes * soap_new_set_mons__InitRes(struct soap *soap, bool isOK) { struct mons__InitRes *_p = soap_instantiate_mons__InitRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__InitRes(soap, _p); _p->isOK = isOK; } return _p; }

inline void soap_delete_mons__InitRes(struct soap *soap, struct mons__InitRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__InitRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SetSystemTime
#define SOAP_TYPE_mons__SetSystemTime (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetSystemTime(struct soap*, struct mons__SetSystemTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetSystemTime(struct soap*, const struct mons__SetSystemTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetSystemTime(struct soap*, const char*, int, const struct mons__SetSystemTime *, const char*);
SOAP_FMAC3 struct mons__SetSystemTime * SOAP_FMAC4 soap_in_mons__SetSystemTime(struct soap*, const char*, struct mons__SetSystemTime *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetSystemTime(struct soap*, const struct mons__SetSystemTime *, const char*, const char*);

#ifndef soap_write_mons__SetSystemTime
#define soap_write_mons__SetSystemTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SetSystemTime(soap, data),0) || soap_put_mons__SetSystemTime(soap, data, "mons:SetSystemTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SetSystemTime * SOAP_FMAC4 soap_get_mons__SetSystemTime(struct soap*, struct mons__SetSystemTime *, const char*, const char*);

#ifndef soap_read_mons__SetSystemTime
#define soap_read_mons__SetSystemTime(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SetSystemTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SetSystemTime * SOAP_FMAC2 soap_instantiate_mons__SetSystemTime(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SetSystemTime * soap_new_mons__SetSystemTime(struct soap *soap, int n = -1) { return soap_instantiate_mons__SetSystemTime(soap, n, NULL, NULL, NULL); }

inline struct mons__SetSystemTime * soap_new_req_mons__SetSystemTime(struct soap *soap, struct mons__SetSystemtimeInfo& timeInfos) { struct mons__SetSystemTime *_p = soap_instantiate_mons__SetSystemTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetSystemTime(soap, _p); _p->timeInfos = timeInfos; } return _p; }

inline struct mons__SetSystemTime * soap_new_set_mons__SetSystemTime(struct soap *soap, struct mons__SetSystemtimeInfo& timeInfos) { struct mons__SetSystemTime *_p = soap_instantiate_mons__SetSystemTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetSystemTime(soap, _p); _p->timeInfos = timeInfos; } return _p; }

inline void soap_delete_mons__SetSystemTime(struct soap *soap, struct mons__SetSystemTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetSystemTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SetSystemInfoRes
#define SOAP_TYPE_mons__SetSystemInfoRes (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetSystemInfoRes(struct soap*, struct mons__SetSystemInfoRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetSystemInfoRes(struct soap*, const struct mons__SetSystemInfoRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetSystemInfoRes(struct soap*, const char*, int, const struct mons__SetSystemInfoRes *, const char*);
SOAP_FMAC3 struct mons__SetSystemInfoRes * SOAP_FMAC4 soap_in_mons__SetSystemInfoRes(struct soap*, const char*, struct mons__SetSystemInfoRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetSystemInfoRes(struct soap*, const struct mons__SetSystemInfoRes *, const char*, const char*);

#ifndef soap_write_mons__SetSystemInfoRes
#define soap_write_mons__SetSystemInfoRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SetSystemInfoRes(soap, data),0) || soap_put_mons__SetSystemInfoRes(soap, data, "mons:SetSystemInfoRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SetSystemInfoRes * SOAP_FMAC4 soap_get_mons__SetSystemInfoRes(struct soap*, struct mons__SetSystemInfoRes *, const char*, const char*);

#ifndef soap_read_mons__SetSystemInfoRes
#define soap_read_mons__SetSystemInfoRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SetSystemInfoRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SetSystemInfoRes * SOAP_FMAC2 soap_instantiate_mons__SetSystemInfoRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SetSystemInfoRes * soap_new_mons__SetSystemInfoRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__SetSystemInfoRes(soap, n, NULL, NULL, NULL); }

inline struct mons__SetSystemInfoRes * soap_new_req_mons__SetSystemInfoRes(struct soap *soap, bool isOK) { struct mons__SetSystemInfoRes *_p = soap_instantiate_mons__SetSystemInfoRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetSystemInfoRes(soap, _p); _p->isOK = isOK; } return _p; }

inline struct mons__SetSystemInfoRes * soap_new_set_mons__SetSystemInfoRes(struct soap *soap, bool isOK) { struct mons__SetSystemInfoRes *_p = soap_instantiate_mons__SetSystemInfoRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetSystemInfoRes(soap, _p); _p->isOK = isOK; } return _p; }

inline void soap_delete_mons__SetSystemInfoRes(struct soap *soap, struct mons__SetSystemInfoRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetSystemInfoRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SetSystemtimeInfo
#define SOAP_TYPE_mons__SetSystemtimeInfo (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetSystemtimeInfo(struct soap*, struct mons__SetSystemtimeInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetSystemtimeInfo(struct soap*, const struct mons__SetSystemtimeInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetSystemtimeInfo(struct soap*, const char*, int, const struct mons__SetSystemtimeInfo *, const char*);
SOAP_FMAC3 struct mons__SetSystemtimeInfo * SOAP_FMAC4 soap_in_mons__SetSystemtimeInfo(struct soap*, const char*, struct mons__SetSystemtimeInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetSystemtimeInfo(struct soap*, const struct mons__SetSystemtimeInfo *, const char*, const char*);

#ifndef soap_write_mons__SetSystemtimeInfo
#define soap_write_mons__SetSystemtimeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SetSystemtimeInfo(soap, data),0) || soap_put_mons__SetSystemtimeInfo(soap, data, "mons:SetSystemtimeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SetSystemtimeInfo * SOAP_FMAC4 soap_get_mons__SetSystemtimeInfo(struct soap*, struct mons__SetSystemtimeInfo *, const char*, const char*);

#ifndef soap_read_mons__SetSystemtimeInfo
#define soap_read_mons__SetSystemtimeInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SetSystemtimeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SetSystemtimeInfo * SOAP_FMAC2 soap_instantiate_mons__SetSystemtimeInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SetSystemtimeInfo * soap_new_mons__SetSystemtimeInfo(struct soap *soap, int n = -1) { return soap_instantiate_mons__SetSystemtimeInfo(soap, n, NULL, NULL, NULL); }

inline struct mons__SetSystemtimeInfo * soap_new_req_mons__SetSystemtimeInfo(struct soap *soap, unsigned int unYear, unsigned int unMonth, unsigned int unDay, unsigned int unHour, unsigned int unMinute, unsigned int unSecond) { struct mons__SetSystemtimeInfo *_p = soap_instantiate_mons__SetSystemtimeInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetSystemtimeInfo(soap, _p); _p->unYear = unYear; _p->unMonth = unMonth; _p->unDay = unDay; _p->unHour = unHour; _p->unMinute = unMinute; _p->unSecond = unSecond; } return _p; }

inline struct mons__SetSystemtimeInfo * soap_new_set_mons__SetSystemtimeInfo(struct soap *soap, unsigned int unYear, unsigned int unMonth, unsigned int unDay, unsigned int unHour, unsigned int unMinute, unsigned int unSecond) { struct mons__SetSystemtimeInfo *_p = soap_instantiate_mons__SetSystemtimeInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetSystemtimeInfo(soap, _p); _p->unYear = unYear; _p->unMonth = unMonth; _p->unDay = unDay; _p->unHour = unHour; _p->unMinute = unMinute; _p->unSecond = unSecond; } return _p; }

inline void soap_delete_mons__SetSystemtimeInfo(struct soap *soap, struct mons__SetSystemtimeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetSystemtimeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetSystemTimeInfo
#define SOAP_TYPE_mons__GetSystemTimeInfo (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetSystemTimeInfo(struct soap*, struct mons__GetSystemTimeInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetSystemTimeInfo(struct soap*, const struct mons__GetSystemTimeInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetSystemTimeInfo(struct soap*, const char*, int, const struct mons__GetSystemTimeInfo *, const char*);
SOAP_FMAC3 struct mons__GetSystemTimeInfo * SOAP_FMAC4 soap_in_mons__GetSystemTimeInfo(struct soap*, const char*, struct mons__GetSystemTimeInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetSystemTimeInfo(struct soap*, const struct mons__GetSystemTimeInfo *, const char*, const char*);

#ifndef soap_write_mons__GetSystemTimeInfo
#define soap_write_mons__GetSystemTimeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetSystemTimeInfo(soap, data),0) || soap_put_mons__GetSystemTimeInfo(soap, data, "mons:GetSystemTimeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetSystemTimeInfo * SOAP_FMAC4 soap_get_mons__GetSystemTimeInfo(struct soap*, struct mons__GetSystemTimeInfo *, const char*, const char*);

#ifndef soap_read_mons__GetSystemTimeInfo
#define soap_read_mons__GetSystemTimeInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetSystemTimeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetSystemTimeInfo * SOAP_FMAC2 soap_instantiate_mons__GetSystemTimeInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetSystemTimeInfo * soap_new_mons__GetSystemTimeInfo(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetSystemTimeInfo(soap, n, NULL, NULL, NULL); }

inline struct mons__GetSystemTimeInfo * soap_new_req_mons__GetSystemTimeInfo(struct soap *soap) { struct mons__GetSystemTimeInfo *_p = soap_instantiate_mons__GetSystemTimeInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetSystemTimeInfo(soap, _p); } return _p; }

inline struct mons__GetSystemTimeInfo * soap_new_set_mons__GetSystemTimeInfo(struct soap *soap) { struct mons__GetSystemTimeInfo *_p = soap_instantiate_mons__GetSystemTimeInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetSystemTimeInfo(soap, _p); } return _p; }

inline void soap_delete_mons__GetSystemTimeInfo(struct soap *soap, struct mons__GetSystemTimeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetSystemTimeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetSystemTimeRes
#define SOAP_TYPE_mons__GetSystemTimeRes (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetSystemTimeRes(struct soap*, struct mons__GetSystemTimeRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetSystemTimeRes(struct soap*, const struct mons__GetSystemTimeRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetSystemTimeRes(struct soap*, const char*, int, const struct mons__GetSystemTimeRes *, const char*);
SOAP_FMAC3 struct mons__GetSystemTimeRes * SOAP_FMAC4 soap_in_mons__GetSystemTimeRes(struct soap*, const char*, struct mons__GetSystemTimeRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetSystemTimeRes(struct soap*, const struct mons__GetSystemTimeRes *, const char*, const char*);

#ifndef soap_write_mons__GetSystemTimeRes
#define soap_write_mons__GetSystemTimeRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetSystemTimeRes(soap, data),0) || soap_put_mons__GetSystemTimeRes(soap, data, "mons:GetSystemTimeRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetSystemTimeRes * SOAP_FMAC4 soap_get_mons__GetSystemTimeRes(struct soap*, struct mons__GetSystemTimeRes *, const char*, const char*);

#ifndef soap_read_mons__GetSystemTimeRes
#define soap_read_mons__GetSystemTimeRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetSystemTimeRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetSystemTimeRes * SOAP_FMAC2 soap_instantiate_mons__GetSystemTimeRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetSystemTimeRes * soap_new_mons__GetSystemTimeRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetSystemTimeRes(soap, n, NULL, NULL, NULL); }

inline struct mons__GetSystemTimeRes * soap_new_req_mons__GetSystemTimeRes(struct soap *soap, unsigned int unYear, unsigned int unMonth, unsigned int unDay, unsigned int unHour, unsigned int unMinute, unsigned int unSecond) { struct mons__GetSystemTimeRes *_p = soap_instantiate_mons__GetSystemTimeRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetSystemTimeRes(soap, _p); _p->unYear = unYear; _p->unMonth = unMonth; _p->unDay = unDay; _p->unHour = unHour; _p->unMinute = unMinute; _p->unSecond = unSecond; } return _p; }

inline struct mons__GetSystemTimeRes * soap_new_set_mons__GetSystemTimeRes(struct soap *soap, unsigned int unYear, unsigned int unMonth, unsigned int unDay, unsigned int unHour, unsigned int unMinute, unsigned int unSecond) { struct mons__GetSystemTimeRes *_p = soap_instantiate_mons__GetSystemTimeRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetSystemTimeRes(soap, _p); _p->unYear = unYear; _p->unMonth = unMonth; _p->unDay = unDay; _p->unHour = unHour; _p->unMinute = unMinute; _p->unSecond = unSecond; } return _p; }

inline void soap_delete_mons__GetSystemTimeRes(struct soap *soap, struct mons__GetSystemTimeRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetSystemTimeRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SetIpcInfo
#define SOAP_TYPE_mons__SetIpcInfo (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetIpcInfo(struct soap*, struct mons__SetIpcInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetIpcInfo(struct soap*, const struct mons__SetIpcInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetIpcInfo(struct soap*, const char*, int, const struct mons__SetIpcInfo *, const char*);
SOAP_FMAC3 struct mons__SetIpcInfo * SOAP_FMAC4 soap_in_mons__SetIpcInfo(struct soap*, const char*, struct mons__SetIpcInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetIpcInfo(struct soap*, const struct mons__SetIpcInfo *, const char*, const char*);

#ifndef soap_write_mons__SetIpcInfo
#define soap_write_mons__SetIpcInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SetIpcInfo(soap, data),0) || soap_put_mons__SetIpcInfo(soap, data, "mons:SetIpcInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SetIpcInfo * SOAP_FMAC4 soap_get_mons__SetIpcInfo(struct soap*, struct mons__SetIpcInfo *, const char*, const char*);

#ifndef soap_read_mons__SetIpcInfo
#define soap_read_mons__SetIpcInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SetIpcInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SetIpcInfo * SOAP_FMAC2 soap_instantiate_mons__SetIpcInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SetIpcInfo * soap_new_mons__SetIpcInfo(struct soap *soap, int n = -1) { return soap_instantiate_mons__SetIpcInfo(soap, n, NULL, NULL, NULL); }

inline struct mons__SetIpcInfo * soap_new_req_mons__SetIpcInfo(struct soap *soap, int HallNo, int ipcPo, int channelID) { struct mons__SetIpcInfo *_p = soap_instantiate_mons__SetIpcInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetIpcInfo(soap, _p); _p->HallNo = HallNo; _p->ipcPo = ipcPo; _p->channelID = channelID; } return _p; }

inline struct mons__SetIpcInfo * soap_new_set_mons__SetIpcInfo(struct soap *soap, int HallNo, int ipcPo, int channelID) { struct mons__SetIpcInfo *_p = soap_instantiate_mons__SetIpcInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetIpcInfo(soap, _p); _p->HallNo = HallNo; _p->ipcPo = ipcPo; _p->channelID = channelID; } return _p; }

inline void soap_delete_mons__SetIpcInfo(struct soap *soap, struct mons__SetIpcInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetIpcInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SetIpcInfoRes
#define SOAP_TYPE_mons__SetIpcInfoRes (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetIpcInfoRes(struct soap*, struct mons__SetIpcInfoRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetIpcInfoRes(struct soap*, const struct mons__SetIpcInfoRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetIpcInfoRes(struct soap*, const char*, int, const struct mons__SetIpcInfoRes *, const char*);
SOAP_FMAC3 struct mons__SetIpcInfoRes * SOAP_FMAC4 soap_in_mons__SetIpcInfoRes(struct soap*, const char*, struct mons__SetIpcInfoRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetIpcInfoRes(struct soap*, const struct mons__SetIpcInfoRes *, const char*, const char*);

#ifndef soap_write_mons__SetIpcInfoRes
#define soap_write_mons__SetIpcInfoRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SetIpcInfoRes(soap, data),0) || soap_put_mons__SetIpcInfoRes(soap, data, "mons:SetIpcInfoRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SetIpcInfoRes * SOAP_FMAC4 soap_get_mons__SetIpcInfoRes(struct soap*, struct mons__SetIpcInfoRes *, const char*, const char*);

#ifndef soap_read_mons__SetIpcInfoRes
#define soap_read_mons__SetIpcInfoRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SetIpcInfoRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SetIpcInfoRes * SOAP_FMAC2 soap_instantiate_mons__SetIpcInfoRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SetIpcInfoRes * soap_new_mons__SetIpcInfoRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__SetIpcInfoRes(soap, n, NULL, NULL, NULL); }

inline struct mons__SetIpcInfoRes * soap_new_req_mons__SetIpcInfoRes(struct soap *soap, bool isOK) { struct mons__SetIpcInfoRes *_p = soap_instantiate_mons__SetIpcInfoRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetIpcInfoRes(soap, _p); _p->isOK = isOK; } return _p; }

inline struct mons__SetIpcInfoRes * soap_new_set_mons__SetIpcInfoRes(struct soap *soap, bool isOK) { struct mons__SetIpcInfoRes *_p = soap_instantiate_mons__SetIpcInfoRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetIpcInfoRes(soap, _p); _p->isOK = isOK; } return _p; }

inline void soap_delete_mons__SetIpcInfoRes(struct soap *soap, struct mons__SetIpcInfoRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetIpcInfoRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__IPCINFO
#define SOAP_TYPE_mons__IPCINFO (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__IPCINFO(struct soap*, struct mons__IPCINFO *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__IPCINFO(struct soap*, const struct mons__IPCINFO *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__IPCINFO(struct soap*, const char*, int, const struct mons__IPCINFO *, const char*);
SOAP_FMAC3 struct mons__IPCINFO * SOAP_FMAC4 soap_in_mons__IPCINFO(struct soap*, const char*, struct mons__IPCINFO *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__IPCINFO(struct soap*, const struct mons__IPCINFO *, const char*, const char*);

#ifndef soap_write_mons__IPCINFO
#define soap_write_mons__IPCINFO(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__IPCINFO(soap, data),0) || soap_put_mons__IPCINFO(soap, data, "mons:IPCINFO", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__IPCINFO * SOAP_FMAC4 soap_get_mons__IPCINFO(struct soap*, struct mons__IPCINFO *, const char*, const char*);

#ifndef soap_read_mons__IPCINFO
#define soap_read_mons__IPCINFO(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__IPCINFO(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__IPCINFO * SOAP_FMAC2 soap_instantiate_mons__IPCINFO(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__IPCINFO * soap_new_mons__IPCINFO(struct soap *soap, int n = -1) { return soap_instantiate_mons__IPCINFO(soap, n, NULL, NULL, NULL); }

inline struct mons__IPCINFO * soap_new_req_mons__IPCINFO(struct soap *soap, int HallNo, int ipcPo, int channelID) { struct mons__IPCINFO *_p = soap_instantiate_mons__IPCINFO(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__IPCINFO(soap, _p); _p->HallNo = HallNo; _p->ipcPo = ipcPo; _p->channelID = channelID; } return _p; }

inline struct mons__IPCINFO * soap_new_set_mons__IPCINFO(struct soap *soap, int HallNo, int ipcPo, int channelID) { struct mons__IPCINFO *_p = soap_instantiate_mons__IPCINFO(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__IPCINFO(soap, _p); _p->HallNo = HallNo; _p->ipcPo = ipcPo; _p->channelID = channelID; } return _p; }

inline void soap_delete_mons__IPCINFO(struct soap *soap, struct mons__IPCINFO *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__IPCINFO(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__DownLoadByTime
#define SOAP_TYPE_mons__DownLoadByTime (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__DownLoadByTime(struct soap*, struct mons__DownLoadByTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__DownLoadByTime(struct soap*, const struct mons__DownLoadByTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__DownLoadByTime(struct soap*, const char*, int, const struct mons__DownLoadByTime *, const char*);
SOAP_FMAC3 struct mons__DownLoadByTime * SOAP_FMAC4 soap_in_mons__DownLoadByTime(struct soap*, const char*, struct mons__DownLoadByTime *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__DownLoadByTime(struct soap*, const struct mons__DownLoadByTime *, const char*, const char*);

#ifndef soap_write_mons__DownLoadByTime
#define soap_write_mons__DownLoadByTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__DownLoadByTime(soap, data),0) || soap_put_mons__DownLoadByTime(soap, data, "mons:DownLoadByTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__DownLoadByTime * SOAP_FMAC4 soap_get_mons__DownLoadByTime(struct soap*, struct mons__DownLoadByTime *, const char*, const char*);

#ifndef soap_read_mons__DownLoadByTime
#define soap_read_mons__DownLoadByTime(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__DownLoadByTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__DownLoadByTime * SOAP_FMAC2 soap_instantiate_mons__DownLoadByTime(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__DownLoadByTime * soap_new_mons__DownLoadByTime(struct soap *soap, int n = -1) { return soap_instantiate_mons__DownLoadByTime(soap, n, NULL, NULL, NULL); }

inline struct mons__DownLoadByTime * soap_new_req_mons__DownLoadByTime(struct soap *soap, int id, int nAudiNU, int nDevicePo, struct mons__DownloadTime& tmStart, struct mons__DownloadTime& tmEnd, std::string& storePath, std::string& mp4name) { struct mons__DownLoadByTime *_p = soap_instantiate_mons__DownLoadByTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__DownLoadByTime(soap, _p); _p->id = id; _p->nAudiNU = nAudiNU; _p->nDevicePo = nDevicePo; _p->tmStart = tmStart; _p->tmEnd = tmEnd; _p->storePath = storePath; _p->mp4name = mp4name; } return _p; }

inline struct mons__DownLoadByTime * soap_new_set_mons__DownLoadByTime(struct soap *soap, int id, int nAudiNU, int nDevicePo, struct mons__DownloadTime& tmStart, struct mons__DownloadTime& tmEnd, std::string& storePath, std::string& mp4name) { struct mons__DownLoadByTime *_p = soap_instantiate_mons__DownLoadByTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__DownLoadByTime(soap, _p); _p->id = id; _p->nAudiNU = nAudiNU; _p->nDevicePo = nDevicePo; _p->tmStart = tmStart; _p->tmEnd = tmEnd; _p->storePath = storePath; _p->mp4name = mp4name; } return _p; }

inline void soap_delete_mons__DownLoadByTime(struct soap *soap, struct mons__DownLoadByTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__DownLoadByTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__DownloadTimeResponse
#define SOAP_TYPE_mons__DownloadTimeResponse (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__DownloadTimeResponse(struct soap*, struct mons__DownloadTimeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__DownloadTimeResponse(struct soap*, const struct mons__DownloadTimeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__DownloadTimeResponse(struct soap*, const char*, int, const struct mons__DownloadTimeResponse *, const char*);
SOAP_FMAC3 struct mons__DownloadTimeResponse * SOAP_FMAC4 soap_in_mons__DownloadTimeResponse(struct soap*, const char*, struct mons__DownloadTimeResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__DownloadTimeResponse(struct soap*, const struct mons__DownloadTimeResponse *, const char*, const char*);

#ifndef soap_write_mons__DownloadTimeResponse
#define soap_write_mons__DownloadTimeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__DownloadTimeResponse(soap, data),0) || soap_put_mons__DownloadTimeResponse(soap, data, "mons:DownloadTimeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__DownloadTimeResponse * SOAP_FMAC4 soap_get_mons__DownloadTimeResponse(struct soap*, struct mons__DownloadTimeResponse *, const char*, const char*);

#ifndef soap_read_mons__DownloadTimeResponse
#define soap_read_mons__DownloadTimeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__DownloadTimeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__DownloadTimeResponse * SOAP_FMAC2 soap_instantiate_mons__DownloadTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__DownloadTimeResponse * soap_new_mons__DownloadTimeResponse(struct soap *soap, int n = -1) { return soap_instantiate_mons__DownloadTimeResponse(soap, n, NULL, NULL, NULL); }

inline struct mons__DownloadTimeResponse * soap_new_req_mons__DownloadTimeResponse(struct soap *soap, int id, std::string& fileNameMp4, bool isOK) { struct mons__DownloadTimeResponse *_p = soap_instantiate_mons__DownloadTimeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__DownloadTimeResponse(soap, _p); _p->id = id; _p->fileNameMp4 = fileNameMp4; _p->isOK = isOK; } return _p; }

inline struct mons__DownloadTimeResponse * soap_new_set_mons__DownloadTimeResponse(struct soap *soap, int id, std::string& fileNameMp4, bool isOK) { struct mons__DownloadTimeResponse *_p = soap_instantiate_mons__DownloadTimeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__DownloadTimeResponse(soap, _p); _p->id = id; _p->fileNameMp4 = fileNameMp4; _p->isOK = isOK; } return _p; }

inline void soap_delete_mons__DownloadTimeResponse(struct soap *soap, struct mons__DownloadTimeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__DownloadTimeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__DownloadTime
#define SOAP_TYPE_mons__DownloadTime (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__DownloadTime(struct soap*, struct mons__DownloadTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__DownloadTime(struct soap*, const struct mons__DownloadTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__DownloadTime(struct soap*, const char*, int, const struct mons__DownloadTime *, const char*);
SOAP_FMAC3 struct mons__DownloadTime * SOAP_FMAC4 soap_in_mons__DownloadTime(struct soap*, const char*, struct mons__DownloadTime *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__DownloadTime(struct soap*, const struct mons__DownloadTime *, const char*, const char*);

#ifndef soap_write_mons__DownloadTime
#define soap_write_mons__DownloadTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__DownloadTime(soap, data),0) || soap_put_mons__DownloadTime(soap, data, "mons:DownloadTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__DownloadTime * SOAP_FMAC4 soap_get_mons__DownloadTime(struct soap*, struct mons__DownloadTime *, const char*, const char*);

#ifndef soap_read_mons__DownloadTime
#define soap_read_mons__DownloadTime(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__DownloadTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__DownloadTime * SOAP_FMAC2 soap_instantiate_mons__DownloadTime(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__DownloadTime * soap_new_mons__DownloadTime(struct soap *soap, int n = -1) { return soap_instantiate_mons__DownloadTime(soap, n, NULL, NULL, NULL); }

inline struct mons__DownloadTime * soap_new_req_mons__DownloadTime(struct soap *soap, unsigned int dwYear, unsigned int dwMonth, unsigned int dwDay, unsigned int dwHour, unsigned int dwMinute, unsigned int dwSecond) { struct mons__DownloadTime *_p = soap_instantiate_mons__DownloadTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__DownloadTime(soap, _p); _p->dwYear = dwYear; _p->dwMonth = dwMonth; _p->dwDay = dwDay; _p->dwHour = dwHour; _p->dwMinute = dwMinute; _p->dwSecond = dwSecond; } return _p; }

inline struct mons__DownloadTime * soap_new_set_mons__DownloadTime(struct soap *soap, unsigned int dwYear, unsigned int dwMonth, unsigned int dwDay, unsigned int dwHour, unsigned int dwMinute, unsigned int dwSecond) { struct mons__DownloadTime *_p = soap_instantiate_mons__DownloadTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__DownloadTime(soap, _p); _p->dwYear = dwYear; _p->dwMonth = dwMonth; _p->dwDay = dwDay; _p->dwHour = dwHour; _p->dwMinute = dwMinute; _p->dwSecond = dwSecond; } return _p; }

inline void soap_delete_mons__DownloadTime(struct soap *soap, struct mons__DownloadTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__DownloadTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SetDlSpeed
#define SOAP_TYPE_mons__SetDlSpeed (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetDlSpeed(struct soap*, struct mons__SetDlSpeed *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetDlSpeed(struct soap*, const struct mons__SetDlSpeed *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetDlSpeed(struct soap*, const char*, int, const struct mons__SetDlSpeed *, const char*);
SOAP_FMAC3 struct mons__SetDlSpeed * SOAP_FMAC4 soap_in_mons__SetDlSpeed(struct soap*, const char*, struct mons__SetDlSpeed *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetDlSpeed(struct soap*, const struct mons__SetDlSpeed *, const char*, const char*);

#ifndef soap_write_mons__SetDlSpeed
#define soap_write_mons__SetDlSpeed(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SetDlSpeed(soap, data),0) || soap_put_mons__SetDlSpeed(soap, data, "mons:SetDlSpeed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SetDlSpeed * SOAP_FMAC4 soap_get_mons__SetDlSpeed(struct soap*, struct mons__SetDlSpeed *, const char*, const char*);

#ifndef soap_read_mons__SetDlSpeed
#define soap_read_mons__SetDlSpeed(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SetDlSpeed(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SetDlSpeed * SOAP_FMAC2 soap_instantiate_mons__SetDlSpeed(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SetDlSpeed * soap_new_mons__SetDlSpeed(struct soap *soap, int n = -1) { return soap_instantiate_mons__SetDlSpeed(soap, n, NULL, NULL, NULL); }

inline struct mons__SetDlSpeed * soap_new_req_mons__SetDlSpeed(struct soap *soap, bool isOK) { struct mons__SetDlSpeed *_p = soap_instantiate_mons__SetDlSpeed(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetDlSpeed(soap, _p); _p->isOK = isOK; } return _p; }

inline struct mons__SetDlSpeed * soap_new_set_mons__SetDlSpeed(struct soap *soap, bool isOK) { struct mons__SetDlSpeed *_p = soap_instantiate_mons__SetDlSpeed(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetDlSpeed(soap, _p); _p->isOK = isOK; } return _p; }

inline void soap_delete_mons__SetDlSpeed(struct soap *soap, struct mons__SetDlSpeed *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetDlSpeed(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SetDLSpeedResponse
#define SOAP_TYPE_mons__SetDLSpeedResponse (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SetDLSpeedResponse(struct soap*, struct mons__SetDLSpeedResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SetDLSpeedResponse(struct soap*, const struct mons__SetDLSpeedResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SetDLSpeedResponse(struct soap*, const char*, int, const struct mons__SetDLSpeedResponse *, const char*);
SOAP_FMAC3 struct mons__SetDLSpeedResponse * SOAP_FMAC4 soap_in_mons__SetDLSpeedResponse(struct soap*, const char*, struct mons__SetDLSpeedResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SetDLSpeedResponse(struct soap*, const struct mons__SetDLSpeedResponse *, const char*, const char*);

#ifndef soap_write_mons__SetDLSpeedResponse
#define soap_write_mons__SetDLSpeedResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SetDLSpeedResponse(soap, data),0) || soap_put_mons__SetDLSpeedResponse(soap, data, "mons:SetDLSpeedResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SetDLSpeedResponse * SOAP_FMAC4 soap_get_mons__SetDLSpeedResponse(struct soap*, struct mons__SetDLSpeedResponse *, const char*, const char*);

#ifndef soap_read_mons__SetDLSpeedResponse
#define soap_read_mons__SetDLSpeedResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SetDLSpeedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SetDLSpeedResponse * SOAP_FMAC2 soap_instantiate_mons__SetDLSpeedResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SetDLSpeedResponse * soap_new_mons__SetDLSpeedResponse(struct soap *soap, int n = -1) { return soap_instantiate_mons__SetDLSpeedResponse(soap, n, NULL, NULL, NULL); }

inline struct mons__SetDLSpeedResponse * soap_new_req_mons__SetDLSpeedResponse(struct soap *soap, bool isTrue) { struct mons__SetDLSpeedResponse *_p = soap_instantiate_mons__SetDLSpeedResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetDLSpeedResponse(soap, _p); _p->isTrue = isTrue; } return _p; }

inline struct mons__SetDLSpeedResponse * soap_new_set_mons__SetDLSpeedResponse(struct soap *soap, bool isTrue) { struct mons__SetDLSpeedResponse *_p = soap_instantiate_mons__SetDLSpeedResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SetDLSpeedResponse(soap, _p); _p->isTrue = isTrue; } return _p; }

inline void soap_delete_mons__SetDLSpeedResponse(struct soap *soap, struct mons__SetDLSpeedResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SetDLSpeedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetoneInfos
#define SOAP_TYPE_mons__GetoneInfos (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetoneInfos(struct soap*, struct mons__GetoneInfos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetoneInfos(struct soap*, const struct mons__GetoneInfos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetoneInfos(struct soap*, const char*, int, const struct mons__GetoneInfos *, const char*);
SOAP_FMAC3 struct mons__GetoneInfos * SOAP_FMAC4 soap_in_mons__GetoneInfos(struct soap*, const char*, struct mons__GetoneInfos *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetoneInfos(struct soap*, const struct mons__GetoneInfos *, const char*, const char*);

#ifndef soap_write_mons__GetoneInfos
#define soap_write_mons__GetoneInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetoneInfos(soap, data),0) || soap_put_mons__GetoneInfos(soap, data, "mons:GetoneInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetoneInfos * SOAP_FMAC4 soap_get_mons__GetoneInfos(struct soap*, struct mons__GetoneInfos *, const char*, const char*);

#ifndef soap_read_mons__GetoneInfos
#define soap_read_mons__GetoneInfos(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetoneInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetoneInfos * SOAP_FMAC2 soap_instantiate_mons__GetoneInfos(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetoneInfos * soap_new_mons__GetoneInfos(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetoneInfos(soap, n, NULL, NULL, NULL); }

inline struct mons__GetoneInfos * soap_new_req_mons__GetoneInfos(struct soap *soap) { struct mons__GetoneInfos *_p = soap_instantiate_mons__GetoneInfos(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetoneInfos(soap, _p); } return _p; }

inline struct mons__GetoneInfos * soap_new_set_mons__GetoneInfos(struct soap *soap) { struct mons__GetoneInfos *_p = soap_instantiate_mons__GetoneInfos(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetoneInfos(soap, _p); } return _p; }

inline void soap_delete_mons__GetoneInfos(struct soap *soap, struct mons__GetoneInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetoneInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__get1
#define SOAP_TYPE_mons__get1 (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__get1(struct soap*, struct mons__get1 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__get1(struct soap*, const struct mons__get1 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__get1(struct soap*, const char*, int, const struct mons__get1 *, const char*);
SOAP_FMAC3 struct mons__get1 * SOAP_FMAC4 soap_in_mons__get1(struct soap*, const char*, struct mons__get1 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__get1(struct soap*, const struct mons__get1 *, const char*, const char*);

#ifndef soap_write_mons__get1
#define soap_write_mons__get1(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__get1(soap, data),0) || soap_put_mons__get1(soap, data, "mons:get1", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__get1 * SOAP_FMAC4 soap_get_mons__get1(struct soap*, struct mons__get1 *, const char*, const char*);

#ifndef soap_read_mons__get1
#define soap_read_mons__get1(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__get1(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__get1 * SOAP_FMAC2 soap_instantiate_mons__get1(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__get1 * soap_new_mons__get1(struct soap *soap, int n = -1) { return soap_instantiate_mons__get1(soap, n, NULL, NULL, NULL); }

inline struct mons__get1 * soap_new_req_mons__get1(struct soap *soap, int i) { struct mons__get1 *_p = soap_instantiate_mons__get1(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__get1(soap, _p); _p->i = i; } return _p; }

inline struct mons__get1 * soap_new_set_mons__get1(struct soap *soap, int i) { struct mons__get1 *_p = soap_instantiate_mons__get1(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__get1(soap, _p); _p->i = i; } return _p; }

inline void soap_delete_mons__get1(struct soap *soap, struct mons__get1 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__get1(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
